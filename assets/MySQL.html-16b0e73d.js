import{_ as s,X as n,Y as a,Z as e}from"./framework-bf6cbb95.js";const l="/blog/assets/比较运算符-6f9f7ef5.png",t="/blog/assets/逻辑运算符-dd64c31d.png",p="/blog/assets/常用聚合函数-73dda33e.png",i="/blog/assets/数值函数-202d0d3d.png",o="/blog/assets/字符串函数-5f04af16.png",c="/blog/assets/日期函数-3928fd55.png",d="/blog/assets/流程控制函数-29587312.png",r="/blog/assets/加密解密函数-ef1ce3d8.png",u="/blog/assets/约束-3bb2f0a0.png",k="/blog/assets/MySQL外键删除策略-72524e47.png",v="/blog/assets/笛卡尔积-4a033276.png",m="/blog/assets/多表查询关系-bbd4d4b9.png",h="/blog/assets/MySQL体系结构-84c32775.png",b="/blog/assets/逻辑存储结构图-71fe992d.png",g="/blog/assets/Innodb_MyiSam_Memory_区别-eb07e331.png",y="/blog/assets/事务隔离级别-30d9075c.png",w="/blog/assets/索引结构-9f2e3a24.png",E="/blog/assets/索引与引擎支持关系-16997901246905-46470b78.png",q="/blog/assets/B-tree-95e9ba0f.png",_="/blog/assets/B_Tree-b85cae53.png",f="/blog/assets/索引分类-61896ab6.png",x="/blog/assets/聚集索引和二级索引-a8600193.png",T="/blog/assets/explain详情-d692d856.png",S="/blog/assets/count用法-ae43f15d.png",A={},L=e(`<h2 id="零-docker-容器" tabindex="-1"><a class="header-anchor" href="#零-docker-容器" aria-hidden="true">#</a> 零：Docker 容器</h2><p>拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql:8.0.35
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> mysql
<span class="token function">mkdir</span> mysql/log
<span class="token function">mkdir</span> mysql/data
<span class="token function">mkdir</span> mysql/conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql8 <span class="token punctuation">\\</span>
	<span class="token parameter variable">-v</span> /home/taiyi/docker_data/mysql/log/:/var/log/mysql <span class="token punctuation">\\</span>
	<span class="token parameter variable">-v</span> /home/taiyi/docker_data/mysql/data/:/var/lib/mysql <span class="token punctuation">\\</span>
	<span class="token parameter variable">-v</span> /home/taiyi/docker_data/mysql/conf/:/etc/mysql/conf.d <span class="token punctuation">\\</span>
	<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
	<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
	<span class="token parameter variable">-d</span> mysql:8.0.35 <span class="token punctuation">\\</span>
	--init-connect<span class="token operator">=</span><span class="token string">&quot;SET collation_connection=utf8mb4_0900_ai_ci&quot;</span> <span class="token punctuation">\\</span>
	--init-connect<span class="token operator">=</span><span class="token string">&quot;SET NAMES utf8mb4&quot;</span> <span class="token punctuation">\\</span>
	--skip-character-set-client-handshake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一、mysql-概述" tabindex="-1"><a class="header-anchor" href="#一、mysql-概述" aria-hidden="true">#</a> 一、MySQL 概述</h2><h3 id="_1、数据库" tabindex="-1"><a class="header-anchor" href="#_1、数据库" aria-hidden="true">#</a> 1、数据库</h3><ul><li>DataBse 简称DB</li><li>存储数据的“仓库”，其本质是一个文件系统，保存一系列有组织的数据</li></ul><h3 id="_2、数据库管理系统" tabindex="-1"><a class="header-anchor" href="#_2、数据库管理系统" aria-hidden="true">#</a> 2、数据库管理系统</h3><ul><li>Database Management System 简称 DBMS</li><li>操作个管理数据库的大型软件</li></ul><h3 id="_3、sql-概念" tabindex="-1"><a class="header-anchor" href="#_3、sql-概念" aria-hidden="true">#</a> 3、SQL 概念</h3><ul><li>Structured Query Language 简称 SQL</li><li>操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准</li></ul><h3 id="_4、关系型与非关系型" tabindex="-1"><a class="header-anchor" href="#_4、关系型与非关系型" aria-hidden="true">#</a> 4、关系型与非关系型</h3><ul><li>关系型数据库：把复杂的数据结构归结为简单的二维关系</li><li>非关系型数据库：Redis （key - value）</li></ul><h3 id="_5、常见的数据库" tabindex="-1"><a class="header-anchor" href="#_5、常见的数据库" aria-hidden="true">#</a> 5、常见的数据库</h3><ul><li>Oracle</li><li>MySQL</li><li>SQL Server</li></ul><h2 id="二、sql-语言" tabindex="-1"><a class="header-anchor" href="#二、sql-语言" aria-hidden="true">#</a> 二、SQL 语言</h2><h3 id="_1、通用语法" tabindex="-1"><a class="header-anchor" href="#_1、通用语法" aria-hidden="true">#</a> 1、通用语法</h3><ul><li><p>SQL 语句可以单行或者多行来写，以分号结尾；</p></li><li><p>SQL 语句可以使用空格或缩进来增强语句的可读性；</p></li><li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写；</p></li><li><p>注释</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 单行注释1</span>
<span class="token comment"># 单行注释2</span>
<span class="token comment">/*
 多行注释
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2、sql-语言分类" tabindex="-1"><a class="header-anchor" href="#_2、sql-语言分类" aria-hidden="true">#</a> 2、SQl 语言分类</h3><p>根据其功能，主要分为四类：DDL、DML、DQL、DCL</p><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">全称</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">DDL</td><td style="text-align:center;">Data Definition Language</td><td>语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据库表结构</td></tr><tr><td style="text-align:center;">DML</td><td style="text-align:center;">Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td style="text-align:center;">DQL</td><td style="text-align:center;">Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td style="text-align:center;">DCL</td><td style="text-align:center;">Data Control Language</td><td>数据控制语言，用来创建数据库用户，控制数据库访问权限</td></tr></tbody></table><h3 id="_3、数据类型" tabindex="-1"><a class="header-anchor" href="#_3、数据类型" aria-hidden="true">#</a> 3、数据类型</h3><ol><li><p>数值类型</p><table><thead><tr><th><strong>类型</strong></th><th>有符号(SIGNED)取值范围</th><th>无符号(UNSIGNED)取值范围</th><th style="text-align:left;">大小</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>(-128，127)</td><td>(0，255)</td><td style="text-align:left;">1byte</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>(-32768，32767)</td><td>(0，65535)</td><td style="text-align:left;">2bytes</td><td>大整数值</td></tr><tr><td>INT/INTEGER</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td style="text-align:left;">4bytes</td><td>大整数值</td></tr><tr><td>BIGINT(Long)</td><td>(-2<sup>63，2</sup>63-1)</td><td>(0，2^64-1)</td><td style="text-align:left;">8bytes</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351 E- 38，3.402823466 E+38)</td><td style="text-align:left;">4bytes</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>(-1.7976931348623157 E+308， 1.7976931348623157 E+308)</td><td>0 和 (2.2250738585072014 E-308， 1.7976931348623157 E+308)</td><td style="text-align:left;">8bytes</td><td>双精 度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td></td><td style="text-align:left;"></td><td>小数值(精确)</td></tr></tbody></table></li><li><p>字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table></li><li><p>日期时间类型</p><table><thead><tr><th>类型</th><th>格式</th><th>范围</th><th style="text-align:center;">大小</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 至 9999-12-31</td><td style="text-align:center;">3</td><td>日期值</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 至 838:59:59</td><td style="text-align:center;">3</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>YYYY</td><td>1901 至 2155</td><td style="text-align:center;">1</td><td>年份值</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 至9999-12-31 23:59:59</td><td style="text-align:center;">8</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD</td><td>1970-01-01 00:00:01 至2038-01-19 03:14:07</td><td style="text-align:center;">4</td><td>混合日期和时间值，时间戳</td></tr></tbody></table></li></ol><h3 id="_4、dcl" tabindex="-1"><a class="header-anchor" href="#_4、dcl" aria-hidden="true">#</a> 4、DCL</h3><ul><li><p>% 代表通配符</p></li><li><p>查询用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;taiyi&#39;</span><span class="token variable">@&#39;localhost&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;新密码&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;taiyi&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;111111&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;taiyi&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>权限控制</p><ul><li><p>查询权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;taiyi&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>授予权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">TO</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">all</span> <span class="token keyword">ON</span> mysql<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;taiyi&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>撤销权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">FROM</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">REVOKE</span> <span class="token keyword">all</span> <span class="token keyword">ON</span> mysql<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&#39;taiyi&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_5、ddl" tabindex="-1"><a class="header-anchor" href="#_5、ddl" aria-hidden="true">#</a> 5、DDL</h3><ul><li><p>数据库操作</p><ul><li><p>查看数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看当前数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">default</span> <span class="token keyword">charset</span> 字符集 <span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">collate</span> 排序 规则<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> taiyi<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> taiyi <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> UTF8<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> taiyi <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> UTF8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> taiyi<span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> taiyi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>切换数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> 数据库名；

<span class="token keyword">USE</span> taiyi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>表操作</p><ul><li><p>查看当前数据库所有表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看指定表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DESC</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查询指定表的建表语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">2</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    字段<span class="token number">3</span> 字段<span class="token number">3</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">3</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 表注释<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> nickname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;昵称&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改数据类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 新数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">MODIFY</span> nickname <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改字段名和字段类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 新数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> CHANGE nickname address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">DROP</span> address<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改表名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除指定表，并重新创建</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_6、dml" tabindex="-1"><a class="header-anchor" href="#_6、dml" aria-hidden="true">#</a> 6、DML</h3><ul><li><p>添加数据（INSERT）</p><ul><li><p>给指定数据添加数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>给全部字段添加数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>批量添加数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>修改数据（UPDATE）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除数据（DELETE）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_7、dql" tabindex="-1"><a class="header-anchor" href="#_7、dql" aria-hidden="true">#</a> 7、DQL</h3><h4 id="_7-1、具体业务" tabindex="-1"><a class="header-anchor" href="#_7-1、具体业务" aria-hidden="true">#</a> 7.1、具体业务</h4><ul><li>分页、搜索、排序、条件</li></ul><h4 id="_7-2、基础查询" tabindex="-1"><a class="header-anchor" href="#_7-2、基础查询" aria-hidden="true">#</a> 7.2、基础查询</h4><ul><li><p>不带条件的查询，查询多个字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> 字段<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询字段设置别名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">AS</span> 别名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token punctuation">[</span><span class="token keyword">AS</span> 别名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 字段<span class="token number">3</span> <span class="token punctuation">[</span><span class="token keyword">AS</span> 别名<span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> 字段<span class="token number">1</span> <span class="token punctuation">[</span>别名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token punctuation">[</span>别名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 字段<span class="token number">3</span> <span class="token punctuation">[</span>别名<span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>去除重复记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_7-3、条件查询" tabindex="-1"><a class="header-anchor" href="#_7-3、条件查询" aria-hidden="true">#</a> 7.3、条件查询</h4><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_7-4、运算符" tabindex="-1"><a class="header-anchor" href="#_7-4、运算符" aria-hidden="true">#</a> 7.4、运算符</h4><ul><li><p>比较运算符</p><figure><img src="`+l+'" alt="比较运算符" tabindex="0" loading="lazy"><figcaption>比较运算符</figcaption></figure><ul><li>注意 <ul><li><p>BETWEEN... AND... 范围包含最大值和最小值</p></li><li><p>IS NOT NULL 表示非空</p></li></ul></li></ul></li><li><p>逻辑运算符</p><figure><img src="'+t+`" alt="逻辑运算符" tabindex="0" loading="lazy"><figcaption>逻辑运算符</figcaption></figure></li></ul><h4 id="_7-5、聚合函数" tabindex="-1"><a class="header-anchor" href="#_7-5、聚合函数" aria-hidden="true">#</a> 7.5、聚合函数</h4><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>常用聚合函数</p><figure><img src="`+p+`" alt="常用聚合函数" tabindex="0" loading="lazy"><figcaption>常用聚合函数</figcaption></figure></li></ul><h4 id="_7-6、分组查询" tabindex="-1"><a class="header-anchor" href="#_7-6、分组查询" aria-hidden="true">#</a> 7.6、分组查询</h4><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后过滤条件<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>WHERE 和 HAVING 的区别</p><ul><li>执行时间不同：WHERE 在分组之前执行，不参与分组；HAVING 在分组之后执行</li><li>判断条件不同：WHERE 不能对聚合函数做判断；HAVING 可以</li></ul></li><li><p>注意：</p><ul><li>分组后，查询字段一般为聚合函数和分组字段，查询其他字段没有意义；</li><li>执行顺序：WHERE &gt; 聚合函数 &gt; HAVING</li><li>可以支持多字段分组：GROUP BY COLUME1, COLUME1, ...</li></ul></li><li><p>案例</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询年龄小于45的员工，并根据家庭地址分组，获取员工数量大于等于3的家庭地址</span>
<span class="token keyword">SELECT</span> address<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> num <span class="token keyword">FROM</span> employee <span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">45</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> address <span class="token keyword">HAVING</span> num <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment"># 统计各个家庭地址上上班的男性和女性的员工数量</span>
<span class="token keyword">SELECT</span> address<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">&quot;数量&quot;</span> <span class="token keyword">FROM</span> employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> address<span class="token punctuation">,</span> gender<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_7-7、排序查询" tabindex="-1"><a class="header-anchor" href="#_7-7、排序查询" aria-hidden="true">#</a> 7.7、排序查询</h4><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span><span class="token punctuation">,</span> 字段 排序方式<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>排序方式：</p><ul><li>ASC 升序 默认</li><li>DESC 降序</li></ul></li></ul><h4 id="_7-8、分页查询" tabindex="-1"><a class="header-anchor" href="#_7-8、分页查询" aria-hidden="true">#</a> 7.8、分页查询</h4><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 起始索引<span class="token punctuation">,</span> 查询记录数<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>注意</p><ul><li>起始索引从 0 开始</li><li>起始索引 = （查询页码 - 1） * 每页记录数</li><li>LIMIT 是 MySQL 实现的</li><li>如果只查第一页数据，起始索引可以省略</li></ul></li></ul><h4 id="_7-9、执行优先级" tabindex="-1"><a class="header-anchor" href="#_7-9、执行优先级" aria-hidden="true">#</a> 7.9、执行优先级</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表				<span class="token comment"># 4</span>
<span class="token keyword">FROM</span> 表名					<span class="token comment"># 1</span>
<span class="token keyword">WHERE</span> 条件列表				<span class="token comment"># 2</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段			<span class="token comment"># 3</span>
<span class="token keyword">HAVING</span> 分组后条件列表
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段列表			<span class="token comment"># 5</span>
<span class="token keyword">LIMIT</span> 分页参数				<span class="token comment"># 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>执行顺序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="三、函数" tabindex="-1"><a class="header-anchor" href="#三、函数" aria-hidden="true">#</a> 三、函数</h2><h3 id="_1、数值函数" tabindex="-1"><a class="header-anchor" href="#_1、数值函数" aria-hidden="true">#</a> 1、数值函数</h3><ul><li><p>数值运算</p><figure><img src="`+i+'" alt="数值函数" tabindex="0" loading="lazy"><figcaption>数值函数</figcaption></figure></li></ul><h3 id="_2、字符串函数" tabindex="-1"><a class="header-anchor" href="#_2、字符串函数" aria-hidden="true">#</a> 2、字符串函数</h3><ul><li><p>字符串处理（CONCAT 会用）</p><figure><img src="'+o+'" alt="字符串函数" tabindex="0" loading="lazy"><figcaption>字符串函数</figcaption></figure></li></ul><h3 id="_3、日期函数" tabindex="-1"><a class="header-anchor" href="#_3、日期函数" aria-hidden="true">#</a> 3、日期函数</h3><ul><li><p>处理日期相关（较少使用）</p><figure><img src="'+c+'" alt="日期函数" tabindex="0" loading="lazy"><figcaption>日期函数</figcaption></figure></li></ul><h3 id="_4、流程函数" tabindex="-1"><a class="header-anchor" href="#_4、流程函数" aria-hidden="true">#</a> 4、流程函数</h3><ul><li><p>控制 sql 执行顺序（很少使用）</p><figure><img src="'+d+'" alt="流程控制函数" tabindex="0" loading="lazy"><figcaption>流程控制函数</figcaption></figure></li></ul><h3 id="_5、加密解密函数" tabindex="-1"><a class="header-anchor" href="#_5、加密解密函数" aria-hidden="true">#</a> 5、加密解密函数</h3><ul><li><p>做加密解密（不用）</p><figure><img src="'+r+'" alt="加密解密函数" tabindex="0" loading="lazy"><figcaption>加密解密函数</figcaption></figure></li></ul><h2 id="四、约束" tabindex="-1"><a class="header-anchor" href="#四、约束" aria-hidden="true">#</a> 四、约束</h2><h3 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h3><ul><li>作用表中字段的规则，用于限制存储在表中的数据</li></ul><h3 id="_2、目的" tabindex="-1"><a class="header-anchor" href="#_2、目的" aria-hidden="true">#</a> 2、目的</h3><ul><li>保证数据库中数据的正确性、有效性和完整性</li></ul><h3 id="_3、mysql-中的约束" tabindex="-1"><a class="header-anchor" href="#_3、mysql-中的约束" aria-hidden="true">#</a> 3、MySQL 中的约束</h3><figure><img src="'+u+`" alt="约束" tabindex="0" loading="lazy"><figcaption>约束</figcaption></figure><h3 id="_4、外键约束" tabindex="-1"><a class="header-anchor" href="#_4、外键约束" aria-hidden="true">#</a> 4、外键约束</h3><ul><li><p>用来建立两张表之间的联系，为了保证数据的一致性和完整性</p></li><li><p>添加外键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 方式一：建表时定义</span>
  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
      字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名<span class="token punctuation">]</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 表注释<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
<span class="token comment"># 方式二：</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除外键</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除更新外键</p><p>添加了外键之后，删除父表数据时产生约束行为，称为删除和更新行为；</p><figure><img src="`+k+`" alt="mysql 外键删除策略" tabindex="0" loading="lazy"><figcaption>mysql 外键删除策略</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>父表会删除或者更新子表中的外键数据；</p></li></ul><h2 id="五、多表关系" tabindex="-1"><a class="header-anchor" href="#五、多表关系" aria-hidden="true">#</a> 五、多表关系</h2><h3 id="_1、一对一关系" tabindex="-1"><a class="header-anchor" href="#_1、一对一关系" aria-hidden="true">#</a> 1、一对一关系</h3><ol><li>用户和用户信息</li><li>关系：一对一</li><li>用途：用于单表拆分，将一张表的基础字段放在一张表中，其他字段放在另一张表中，可以提升查询效率</li><li>实现：在一张表中添加外键，关联另一张表的主键</li></ol><h3 id="_2、一对多关系" tabindex="-1"><a class="header-anchor" href="#_2、一对多关系" aria-hidden="true">#</a> 2、一对多关系</h3><ol><li>部门和员工关系</li><li>关系：一个部门对应多个员工，一个员工对应一个部门</li><li>实现：在多的一方建立指向一的一方的主键</li></ol><h3 id="_3、多对多关系" tabindex="-1"><a class="header-anchor" href="#_3、多对多关系" aria-hidden="true">#</a> 3、多对多关系</h3><ol><li>角色和菜单关系，学生和老师</li><li>关系：一个学生有多个老师，一个老师有多个学生</li><li>实现：建立三方表，中间表包含两方表的主键</li></ol><h2 id="六、多表查询" tabindex="-1"><a class="header-anchor" href="#六、多表查询" aria-hidden="true">#</a> 六、多表查询</h2><h3 id="_1、笛卡尔积" tabindex="-1"><a class="header-anchor" href="#_1、笛卡尔积" aria-hidden="true">#</a> 1、笛卡尔积</h3><ul><li><p>在数学中表示集合A和集合B的所有组合</p><figure><img src="`+v+'" alt="笛卡尔积" tabindex="0" loading="lazy"><figcaption>笛卡尔积</figcaption></figure></li><li><p>在 SQL 消除笛卡尔积？</p><ul><li>加上一定的条件</li></ul></li></ul><h3 id="_2、分类" tabindex="-1"><a class="header-anchor" href="#_2、分类" aria-hidden="true">#</a> 2、分类</h3><ol><li><p>连接查询</p><figure><img src="'+m+`" alt="多表查询关系" tabindex="0" loading="lazy"><figcaption>多表查询关系</figcaption></figure><ol><li><p>内连接（交集数据）</p><ul><li><p>隐式内连接</p><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span><span class="token punctuation">,</span> 表<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>显示内连接</p><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 连接条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>注意：一旦起别名，就不能使用表名</p></li></ul></li><li><p>外连接</p><ul><li><p>左外连接（左表数据，包含交集数据）</p><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">LEFT</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 连接条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>右外连接（右表数据，包含交集数据）</p><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">RIGHT</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 连接条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>注意：左外连接、右外连接可以相互替换</p></li></ul></li><li><p>自连接</p><ul><li><p>自己连接自己，把一张表当成两张表来查询</p></li><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A 别名A <span class="token keyword">JOIN</span> 表A 别名B <span class="token keyword">ON</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>注意</p><ul><li>必须使用别名</li><li>内外连接查询都可以</li></ul></li></ul></li><li><p>联合查询</p><ul><li><p>union 查询</p><ul><li>把多次查询的结果合并起来，形成一个新的查询结果集，<strong>会去重</strong></li></ul></li><li><p>union all 查询</p><ul><li>将全部的数据合并到一起，不会去重</li></ul></li><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>要求</p><ul><li>必须保持查询的列长度一致，字段类型也需要保持一致</li></ul></li></ul></li></ol></li><li><p>子查询</p><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column1 <span class="token keyword">FROM</span> t2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>对于增删改都适用</p></li></ul><ol><li>标量子查询 <ul><li>查询出来的结果是单个值</li><li>常用一些操作符 <ul><li>=</li><li>!=</li><li>&gt;</li><li>&lt;</li><li>&gt;=</li><li>&lt;=</li></ul></li></ul></li><li>列子查询 <ul><li>查询出来是个一列</li><li>常用操作符： <ul><li>IN</li><li>NOT IN</li><li>ANY 任意一个满足就行</li><li>SOME 同上，可以替换</li><li>ALL</li></ul></li></ul></li><li>行子查询 <ul><li>查询出来是个一行</li><li>常用操作符： <ul><li>=</li><li>!=</li><li>IN</li><li>NOT IN</li></ul></li></ul></li><li>表子查询 <ul><li>查询出来是个多行多列</li><li>常用操作符： <ul><li>IN</li></ul></li></ul></li></ol></li></ol><h2 id="七、存储引擎" tabindex="-1"><a class="header-anchor" href="#七、存储引擎" aria-hidden="true">#</a> 七、存储引擎</h2><h3 id="_1、mysql-体系结构" tabindex="-1"><a class="header-anchor" href="#_1、mysql-体系结构" aria-hidden="true">#</a> 1、MySQL 体系结构</h3><figure><img src="`+h+`" alt="MySql体系结构" tabindex="0" loading="lazy"><figcaption>MySql体系结构</figcaption></figure><ul><li>连接层 <ul><li>包含 Socket 通信以及 TCP/IP 通信的客户端连接，主要去完成类似于连接处理，授权认证，包含线程池的概念，通过 SSL 保证和验证安全连接的权限</li></ul></li><li>服务层 <ul><li>SQL 接口，缓存查询，SQL 的分析和优化，包含一些内置函数的执行，优化 sql 确定表的查询顺序，以及是否用索引也是在这里生成相应的执行操作；</li><li>查询语句还会查询内部的缓存，提高查询效率</li></ul></li><li>引擎层 <ul><li>真正的负责 MySQL 中的数据的存储和查取，服务器通过 API 和存储引擎通信；</li><li>不同的引擎具有不同的功能，根据业务需求选取引擎</li></ul></li><li>存储层 <ul><li>做数据库的存储和提取，数据、索引、二进制日志、错误日志、查询日志、慢查询日志等系统文件上，通过存储引擎进行交互</li></ul></li></ul><p>MySQL 默认使用 InnoDB 引擎：</p><ul><li><p>查看创建表的语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看当前数据库支持的引擎</p></li><li><p>默认的存储引擎可在 my.ini 配置文件中使用 default-storage-engine 选项指定</p></li><li><p>修改存储引擎</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tablename <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如何在创建表的时候添加引擎</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>
	字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">1</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">2</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    字段<span class="token number">3</span> 字段<span class="token number">3</span>类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段<span class="token number">3</span>注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段n注释<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2、innodb" tabindex="-1"><a class="header-anchor" href="#_2、innodb" aria-hidden="true">#</a> 2、InnoDB</h3><ol><li><p>概述</p><ul><li>InnoDB 数据引擎是一种兼顾高可信和高性能的通用存储引擎，5.5 之后默认的存储引擎</li></ul></li><li><p>特点</p><ul><li>支持事务（DML 遵循 ACID 模型）</li><li>支持外键 FOERIGN KEY 约束，保证数据的完整性和正确性</li><li>支持行级锁，提高并发访问性能</li></ul></li><li><p>文件</p><ul><li>tableName.idb</li><li>InnoDB 会为每张表生成一个对应的表空间文件，存储表的结构、数据、索引</li></ul></li><li><p>注意</p><ul><li><p>MySQL 提供了打开idb 二进制文件的指令</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 新版本</span>
idb2sdi
<span class="token comment"># 旧版本</span>
idb2frm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>存储结构图</p><figure><img src="`+b+'" alt="逻辑存储结构图" tabindex="0" loading="lazy"><figcaption>逻辑存储结构图</figcaption></figure><ul><li>表空间 tablespace <ul><li>InnoDB 存储引擎逻辑结构的最高层，idb 文件就是表空间文件；</li><li>表空间中包含多个 Segment （段）；</li></ul></li><li>段 Segment <ul><li>数据段、索引段、回滚段；</li><li>一个段里面包含多个区；</li></ul></li><li>区 Extent <ul><li>表空间的单元结构，每个区大小为 1M ；</li><li>一个区包含 64 页数据；</li></ul></li><li>页 Page <ul><li>页是最小的组成单元，它是 InnoDB 存储引擎磁盘管理的最小单元；</li><li>大小默认是 16K ；</li></ul></li><li>行 row</li><li>每一行定义存储字段，还有一些隐藏字段</li></ul></li></ol><h3 id="_3、myisam" tabindex="-1"><a class="header-anchor" href="#_3、myisam" aria-hidden="true">#</a> 3、MyISAM</h3><ol><li>概述 <ul><li>是 MySQL 早期的存储引擎；</li></ul></li><li>特点 <ul><li>不支持事务，不支持外键；</li><li>支持表锁，不支持行锁；</li><li>访问速度快；</li></ul></li><li>文件 <ul><li>emp.sdi：存储表结构的信息；</li><li>emp.MYD：存储数据；</li><li>emp.MYI：存储索引；</li></ul></li></ol><h3 id="_4、memory" tabindex="-1"><a class="header-anchor" href="#_4、memory" aria-hidden="true">#</a> 4、Memory</h3><ol><li>概述 <ul><li>使用内存来进行操作，会受到断电影响，是能用来做临时表或缓存</li></ul></li><li>特点 <ul><li>内存存放，支持 Hash 索引（默认），查询速度快；</li></ul></li><li>文件 <ul><li>sdi：存储表结构信息</li></ul></li></ol><h3 id="_5、存储引擎的选用" tabindex="-1"><a class="header-anchor" href="#_5、存储引擎的选用" aria-hidden="true">#</a> 5、存储引擎的选用</h3><figure><img src="'+g+`" alt="Innodb MyiSam Memory 区别" tabindex="0" loading="lazy"><figcaption>Innodb MyiSam Memory 区别</figcaption></figure><ul><li>InnoDB <ul><li>支持事务和外键；</li><li>应用对于事务的完整性有比较高要求的时候选择InnoDB（更新、删除）；</li></ul></li><li>MyISAM <ul><li>应用在对插入比较多的地方（更新和删除少）并且对事务的完整性、并发性要求不高；</li></ul></li><li>Memory <ul><li>把数据保存到内存中，访问速度快，对于临时表缓存非常友好，对于表的大小有限制，不能去保证数据安全；</li></ul></li></ul><h3 id="_6、事务" tabindex="-1"><a class="header-anchor" href="#_6、事务" aria-hidden="true">#</a> 6、事务</h3><h4 id="_6-1、概述" tabindex="-1"><a class="header-anchor" href="#_6-1、概述" aria-hidden="true">#</a> 6.1、概述</h4><ul><li>一定要使用 InnoDB 存储引擎；</li><li>一组操作的集合，是不可分割的工作单元，会把一部分当成一个整体来处理，事务会把操作同时提交或者撤销；要么同时成功，要么同时失败；</li></ul><h4 id="_6-2、事务操作" tabindex="-1"><a class="header-anchor" href="#_6-2、事务操作" aria-hidden="true">#</a> 6.2、事务操作</h4><ul><li><p>案例：转账</p></li><li><p>控制事务方式1</p><ul><li><p>查看事务提交方式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 1:自动提交 0:手动提交</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置事务提交方式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> @<span class="token variable">@autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>提交事务‘</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>回滚事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">rollback</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>控制事务方式2</p><ul><li><p>开启事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> <span class="token keyword">transaction</span> 或者 <span class="token keyword">begin</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>提交事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>回滚事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">rollback</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="_6-3、事务作用对象" tabindex="-1"><a class="header-anchor" href="#_6-3、事务作用对象" aria-hidden="true">#</a> 6.3、事务作用对象</h4><ul><li>只能回滚 insert、update、delete 语句</li><li>不能回滚 select 语句，没有意义</li><li>不能回滚 create、drop、alter 语句</li></ul><h4 id="_6-4、事务的四大特征-acid" tabindex="-1"><a class="header-anchor" href="#_6-4、事务的四大特征-acid" aria-hidden="true">#</a> 6.4、事务的四大特征（ACID）</h4><ul><li>原子性（Atomicity）： <ul><li>整个事务中的所有操作必须作为一个单元全部完成（或者全部取消）不可分割，要么全部成功，要么全部失败；</li></ul></li><li>一致性（Consistency）： <ul><li>事务完成时，数据保持一致状态；</li></ul></li><li>隔离性（Isolation）： <ul><li>数据库会提供隔离机制，并发不会相互影响和干扰；</li><li>一个事务不会影响其他事务的运行</li></ul></li><li>持久性（Durability）： <ul><li>在事务完成以后，对数据库所做的更改将持久的保存在数据库之中，并不会被回滚</li></ul></li></ul><h4 id="_6-5、并发事务的问题-面试常问" tabindex="-1"><a class="header-anchor" href="#_6-5、并发事务的问题-面试常问" aria-hidden="true">#</a> 6.5、并发事务的问题（面试常问）</h4><ul><li>脏读 <ul><li>一个事务读取到另一个事务还没提交的数据；</li></ul></li><li>不可重复度 <ul><li>一个事务先后读取同一条数据，但两次读取数据不同；</li></ul></li><li>幻读 <ul><li>一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，有发现这行数据已经存在，好像出现了“幻影”；</li></ul></li></ul><h4 id="_6-6、事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_6-6、事务的隔离级别" aria-hidden="true">#</a> 6.6、事务的隔离级别</h4><figure><img src="`+y+`" alt="事务隔离级别" tabindex="0" loading="lazy"><figcaption>事务隔离级别</figcaption></figure><ul><li><p>注意</p><ul><li>隔离级别越高，数据越安全，但性能越低；</li><li>需要在性能和安全之间进行取舍；</li></ul></li><li><p>查看隔离级别</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOALTION</span><span class="token punctuation">;</span>

<span class="token comment"># 默认使用可重复度</span>
<span class="token keyword">REPEATABLE</span><span class="token operator">-</span><span class="token keyword">READ</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置隔离级别</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> {<span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span>}<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>隔离级别分为全局和会话级</p><ul><li>全局：对所有会话有效；</li><li>会话级：只对当前会话有效；</li></ul></li><li><p>四种隔离级别</p><ol><li><strong>读未提交</strong>：指一个事务还没提交时，它做的变更就能被其他事务看到；</li><li><strong>读已提交</strong>：指一个事务提交之后，它做的变更才能被其他事务看到；</li><li><strong>可重复度</strong>：指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB 引擎的默认隔离级别；</li><li><strong>串行化</strong>：会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；</li></ol></li></ul><h4 id="_6-7、演示" tabindex="-1"><a class="header-anchor" href="#_6-7、演示" aria-hidden="true">#</a> 6.7、演示</h4><ul><li><p>READ UNCOMMITTED</p><table><thead><tr><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>use transaction;</td><td>use transaction;</td></tr><tr><td>set global transaction isolation level read uncommitted;</td><td></td></tr><tr><td>start transaction;</td><td></td></tr><tr><td></td><td>start transaction;</td></tr><tr><td>insert into account values(1, &#39;ty&#39;,100);</td><td></td></tr><tr><td></td><td>select * from account where id = 1;</td></tr><tr><td>rollback;</td><td></td></tr><tr><td></td><td>select * from account where id = 1;</td></tr></tbody></table></li><li><p>READ COMMITTED</p><table><thead><tr><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>set global transaction isolation level read committed;</td><td></td></tr><tr><td>start transaction;</td><td></td></tr><tr><td></td><td>start transaction;</td></tr><tr><td>insert into account values(1, &#39;ty&#39;,100);</td><td></td></tr><tr><td>select * from account;</td><td></td></tr><tr><td></td><td>select * from account;（查不出数据）</td></tr><tr><td>commit;</td><td></td></tr><tr><td></td><td>select * from account;（查出数据）</td></tr></tbody></table></li><li><p>REPEATABLE READ</p><table><thead><tr><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>set global transaction isolation level repeatable read;</td><td></td></tr><tr><td>start transaction;</td><td></td></tr><tr><td></td><td>start transaction;</td></tr><tr><td>insert into account values(1, &#39;ty&#39;,100);</td><td></td></tr><tr><td></td><td>select * from account;（查不出数据）</td></tr><tr><td>commit;</td><td></td></tr><tr><td></td><td>select * from account;（查出数据）</td></tr></tbody></table></li></ul><h2 id="八、索引" tabindex="-1"><a class="header-anchor" href="#八、索引" aria-hidden="true">#</a> 八、索引</h2><h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><ul><li><p>索引（index）是帮助数据库高效获取数据的数据结构，数据库系统维护查找数据的特定数据结构，这些数据结构指向我们的数据，通过高效算法实现高效查找。</p></li><li><p>优缺点</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>提高查询速度，降低数据库 IO 成本</td><td>索引也需要维护，需要占用存储空间</td></tr><tr><td>通过索引列对数据进行排序，降低排序成本，降低 CPU 消耗</td><td>对于表的 INSERT UPDATE DELETE 效率降低</td></tr></tbody></table></li></ul><h3 id="_2、索引结构" tabindex="-1"><a class="header-anchor" href="#_2、索引结构" aria-hidden="true">#</a> 2、索引结构</h3><h4 id="_2-1、概述" tabindex="-1"><a class="header-anchor" href="#_2-1、概述" aria-hidden="true">#</a> 2.1、概述</h4><ul><li><p>存储引擎层支持索引，不同的存储引擎支持不同的索引</p><figure><img src="`+w+'" alt="索引结构" tabindex="0" loading="lazy"><figcaption>索引结构</figcaption></figure></li><li><p>数据引擎和索引结构之间的关系</p><figure><img src="'+E+'" alt="索引与引擎支持关系" tabindex="0" loading="lazy"><figcaption>索引与引擎支持关系</figcaption></figure></li><li><p>注意</p><ul><li>没有特别说明，提问的数据索引都是 B+ 树索引</li></ul></li></ul><h4 id="_2-2、hash-索引" tabindex="-1"><a class="header-anchor" href="#_2-2、hash-索引" aria-hidden="true">#</a> 2.2、Hash 索引</h4><ul><li>使用 hash 算法，将键值换算成 hash 值，映射到对应的槽位上存储在 hash 表中</li><li>特点： <ul><li>查询非常快；</li><li>hash 只支持对等比较（= in），不支持范围查找（between &gt; &lt;）；</li><li>不支持排序</li><li>没有hash 冲突，查找一次就可以，比 B+ 树还快</li></ul></li><li>MySQL 支持 hash 索引的引擎是 Memory；InnoDB 后续支持 hash 索引是指定条件下自动构建的。</li></ul><h4 id="_2-3、二叉树" tabindex="-1"><a class="header-anchor" href="#_2-3、二叉树" aria-hidden="true">#</a> 2.3、二叉树</h4><ul><li>注意：加入 MySQL 构建二叉树数据结构索引，理想的是平衡的二叉树</li><li>问题： <ol><li>id 的插入的自增的，此时二叉树变成链表，查询性能低；</li><li>数据量很大，层级会变深，查询速度变慢；</li></ol></li></ul><h4 id="_2-4、红黑树" tabindex="-1"><a class="header-anchor" href="#_2-4、红黑树" aria-hidden="true">#</a> 2.4、红黑树</h4><ul><li>问题： <ul><li>红黑树还是一颗二叉树，会存在层级较深，查询速度变慢；</li></ul></li></ul><h4 id="_2-5、b-tree" tabindex="-1"><a class="header-anchor" href="#_2-5、b-tree" aria-hidden="true">#</a> 2.5、B-Tree</h4><ul><li><p>多叉路平衡查找树；</p><figure><img src="'+q+'" alt="B-tree" tabindex="0" loading="lazy"><figcaption>B-tree</figcaption></figure></li><li><p>度数：一个节点的子节点数量；一棵树的最大度为n，那么每个节点最多可以存储 n-1 个值；</p></li><li><p>特点：</p><ul><li>5阶 B 树，每个节点最多有4 个 key ，5个指针；</li><li>当存储元素达到 key 的数量时，中间元素向上分裂；</li><li>叶子结点和非叶子节点都会存放数据；</li></ul></li></ul><h4 id="_2-6、b-tree" tabindex="-1"><a class="header-anchor" href="#_2-6、b-tree" aria-hidden="true">#</a> 2.6、B+Tree</h4><figure><img src="'+_+'" alt="B+Tree" tabindex="0" loading="lazy"><figcaption>B+Tree</figcaption></figure><ul><li>注意： <ul><li>叶子节点存放数据，非叶子节点存放索引；</li><li>叶子节点通过指针进行关联，变成一个链表结构；</li><li>当需要裂变时，非叶子节点的数据也会出现在叶子结点处；</li><li>MySQL 对 B+ Tree 进行优化：在原来 B+Tree 的基础上，增加了指向相邻叶子结点的链表指针；可以提高区间的访问性能；</li></ul></li></ul><h3 id="_3、索引的分类" tabindex="-1"><a class="header-anchor" href="#_3、索引的分类" aria-hidden="true">#</a> 3、索引的分类</h3><figure><img src="'+f+'" alt="索引分类" tabindex="0" loading="lazy"><figcaption>索引分类</figcaption></figure><h3 id="_4、聚集索引与二级索引" tabindex="-1"><a class="header-anchor" href="#_4、聚集索引与二级索引" aria-hidden="true">#</a> 4、聚集索引与二级索引</h3><figure><img src="'+x+`" alt="聚集索引和二级索引" tabindex="0" loading="lazy"><figcaption>聚集索引和二级索引</figcaption></figure><ul><li>注意： <ul><li>数据关联在聚集索引的子节点；</li><li>二级索引只是关联聚集索引的 id ；</li><li>非聚集索引的查询都是通过 <strong>回表查询</strong> 查询出的数据；</li></ul></li><li>聚集索引选取规则： <ul><li>如果存在主键，选择主键作为聚集索引；</li><li>不存在主键，选择第一个唯一索引（UNIQUE）作为聚集索引；</li><li>以上都不满足，InnoDB 会默认生成一个 rowid 作为隐藏的聚集索引；</li></ul></li></ul><h3 id="_5、面试题" tabindex="-1"><a class="header-anchor" href="#_5、面试题" aria-hidden="true">#</a> 5、面试题</h3><ol><li><p>InnoDB 为什么选择 B+Tree 作为索引结构？</p><ul><li>Hash 索引不支持范围查询，不支持排序；</li><li>二叉树索引，层级加深后，查询效率降低；</li><li>B-Tree，叶子节点和非叶子结点都存放数据，每一页数据是 16K；如果非叶子节点存放数据，每一页存放的数据会变少，指针和键值会变少；</li><li>B树的非叶子结点既存索引又存数据，导致非叶子节点的存储的索引变少，不够矮胖；</li><li>B+树的叶子节点之间通过链表连接，对范围查找有利；B树则不是；</li></ul></li><li><p>分析 SQL ，判断查询效率高低？</p><ul><li>id 是主键，name 建立了普通用索引</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># A</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment"># B</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp name <span class="token operator">=</span> <span class="token string">&quot;ez&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>A &gt; B；</li><li>A sql 使用聚集索引，直接返回行信息；</li><li>B sql 先使用二级索引，查找到 name = &#39;ez&#39; 的 id，再通过 id 使用聚集索引查找到行信息；需要回表，效率低；</li></ul></li><li><p>InnoDB 主键索引使用 B+Tree，能够存储多少数据？</p><ul><li>假设一行数据为 1K，一页可以存储16行数据；InnoDB 指针固定占用 6 个字节，主键bigint 8 int 4；</li><li>高度为2： <ul><li>16 * 1024 = x * 8 + (x+1) * 6</li></ul></li><li>高度为3： <ul><li>1171 * 1171 * 16 = 千万级</li></ul></li></ul></li></ol><h3 id="_6、索引语法" tabindex="-1"><a class="header-anchor" href="#_6、索引语法" aria-hidden="true">#</a> 6、索引语法</h3><ol><li><p>查询索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_7、sql-性能分析" tabindex="-1"><a class="header-anchor" href="#_7、sql-性能分析" aria-hidden="true">#</a> 7、SQL 性能分析</h3><h4 id="_7-1、sql-执行频次" tabindex="-1"><a class="header-anchor" href="#_7-1、sql-执行频次" aria-hidden="true">#</a> 7.1、SQL 执行频次</h4><ul><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">&#39;COM_+类型&#39;</span><span class="token punctuation">;</span>
<span class="token comment"># COM_INSERT: 插入次数</span>
<span class="token comment"># COM_UPDATE: 更新次数</span>
<span class="token comment"># COM_DELETE: 删除次数</span>
<span class="token comment"># COM_SELECT: 查询次数</span>
<span class="token comment"># COM_______: 所有</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意：</p><ul><li>通过语法，可以查询到数据库的实际状态，知道数据库是以增删改为主，还是以查询为主；</li><li>如果数据库以查询为主，可以考虑 SQL 的索引优化；</li></ul></li></ul><h4 id="_7-2、慢查询日志" tabindex="-1"><a class="header-anchor" href="#_7-2、慢查询日志" aria-hidden="true">#</a> 7.2、慢查询日志</h4><ul><li><p>记录超过指定时间的查询 SQL，指定参数（long_query_time=10，单位是秒，默认是10s）；</p></li><li><p>查看慢查询功能是否打开</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;slow_query_log&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>my.ini 文件中可以设置</p><ul><li>参数 slow-query-log = 1：1 代表开启，0代表关闭；</li><li>参数 long_query_time = 10：代表慢查询超过10s会被记录；</li><li>参数 slow_query_log_file：慢查询的日志文件；</li></ul></li><li><p>分析慢查询日志</p><ul><li>当 SQL 出现在慢查询日志中的时候，就可以考虑对这条 SQL 进行优化；</li></ul></li></ul><h4 id="_7-3、profile" tabindex="-1"><a class="header-anchor" href="#_7-3、profile" aria-hidden="true">#</a> 7.3、Profile</h4><ul><li><p>概述</p><ul><li>show profiles 能够用来做 SQL 优化，协助我们了解时间消耗去哪里</li></ul></li><li><p>查看 Profile 是否开启</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@Profiling</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置 Profile 开启</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过 profile 了解时间消耗</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#  每次执行 query_id 都会变</span>
<span class="token keyword">SHOW</span> profiles<span class="token punctuation">;</span>

<span class="token comment"># query_id 是使用 \`SHOW profiles;\` 查询出来的 query_id  查看详情</span>
<span class="token keyword">SHOW</span> profile <span class="token keyword">FOR</span> QUERY query_id<span class="token punctuation">;</span>

<span class="token keyword">SHOW</span> profile cpu <span class="token keyword">FOR</span> QUERY query_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_7-4、explain" tabindex="-1"><a class="header-anchor" href="#_7-4、explain" aria-hidden="true">#</a> 7.4、explain</h4><ul><li><p>explain 或者 desc 后可以获取 MySQL 执行 select 语句的信息，包含索引选用、链接表等信息；</p></li><li><p>语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> 查询语句<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>详细信息</p><figure><img src="`+T+`" alt="explain详情" tabindex="0" loading="lazy"><figcaption>explain详情</figcaption></figure><ul><li>type： <ul><li>const：使用主键索引或唯一索引时；</li><li>ref：普通索引；</li><li>range：查找范围；</li><li>all：全表查询；</li></ul></li></ul></li></ul><h4 id="_7-5、索引的使用" tabindex="-1"><a class="header-anchor" href="#_7-5、索引的使用" aria-hidden="true">#</a> 7.5、索引的使用</h4><ul><li>索引能提升查询速度，质的提升</li><li>最左前缀法则 <ul><li>使用用联合索引；</li><li>查询从索引最左列开始，不跳过其中的列；如果跳过，则索引失效（后面字段的索引失效）；</li><li>最左前缀A+B+C： <ul><li>ABC</li><li>AB</li><li>A</li><li>AC（A使用索引）</li><li>BC（不使用索引）</li><li>CBA（使用索引，查询优化器会优化成ABC）</li></ul></li></ul></li><li>索引失效 <ol><li>对索引使用函数运算；</li><li>字符串不加引号（MySQL 会自动把字符串转换成数字）；</li><li>模糊查询（左模糊匹配 或 左右模糊匹配）；</li><li>使用 or 连接（or 前后没有建立索引的时候不会被用到）；</li><li>联合索引中破坏最左匹配原则；</li><li>数据分布（MySQL 自己判断全表扫描比使用索引更优）；【性别】</li><li>比较时使用 &gt;= 而不是 &gt; ；</li></ol></li></ul><h4 id="_7-6、索引的使用原则" tabindex="-1"><a class="header-anchor" href="#_7-6、索引的使用原则" aria-hidden="true">#</a> 7.6、索引的使用原则</h4><ol><li><p>覆盖索引</p><ul><li>SQL 中 query 的所有字段，在索引 B+Tree 的叶子节点上都能找得到的那些索引</li><li>避免使用 select * from table_name;</li><li>有可能避免回表查询（减少一次查询，提高效率；前提是查询的结果就在二级索引中）；</li></ul></li><li><p>前缀索引</p><ul><li>使用某个字段中字符串的前几个字符建立索引；</li><li>减小索引字段大小，可以增加一个索引页中存储的索引值，有效提高索引的查询速度</li><li>计算前缀长度（唯一索引的性能最高，唯一索引的前缀长度是1）</li><li>不重复索引基数/数据表的总记录数；</li><li>最短的前缀，同时前缀长度靠近1；</li></ul></li><li><p>单列索引和联合索引</p><ul><li>使用多个单列索引查询时，并不会全用索引，会根据 MySQL 优化器的指引进行选择</li></ul></li></ol><h4 id="_7-7、索引的设计原则" tabindex="-1"><a class="header-anchor" href="#_7-7、索引的设计原则" aria-hidden="true">#</a> 7.7、索引的设计原则</h4><ol><li>数据量大时，建立索引；</li><li>针对经常查询的多列，建立联合索引；</li><li>如果是字符串类型，而且数据量很大，尽量使用前缀索引；</li><li>索引还需要控制数量，索引越多，增删改越慢；</li><li>选择区分度高的列做索引，尽量建立唯一索引；</li><li>设计列尽量不要存空数据；</li></ol><h2 id="九、sql-优化" tabindex="-1"><a class="header-anchor" href="#九、sql-优化" aria-hidden="true">#</a> 九、SQL 优化</h2><h3 id="_1、插入数据优化" tabindex="-1"><a class="header-anchor" href="#_1、插入数据优化" aria-hidden="true">#</a> 1、插入数据优化</h3><ol><li><p>顺序插入代替乱序插入；</p></li><li><p>批量插入代替单个数据插入；</p></li><li><p>手动控制事务；</p></li><li><p>load 指令加载大数据量：</p><ol><li><p>客户端连接服务端时，添加参数：--local-infile</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql --loacl-infile <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动从本地加载文件开关</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@local_infile</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> @<span class="token variable">@local_infile</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行 load 指令准备好的数据，加载到表结构中</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">&#39;文件路径&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>table_name<span class="token punctuation">\`</span></span> <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span> <span class="token keyword">lines</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="_2、主键优化" tabindex="-1"><a class="header-anchor" href="#_2、主键优化" aria-hidden="true">#</a> 2、主键优化</h3><ol><li>数据组织方式： <ul><li>InnoDB 主键是按顺序存放的，乱序插入会导致页分裂（没有顺序插入导致）；</li><li>页合并（删除）；</li></ul></li><li>设计主键原则 <ol><li>自动递增（auto_increament）：顺序插入，避免页分裂；</li><li>不要使用 UUID、电话号码作为主键；</li><li>不要修改主键；</li></ol></li></ol><h3 id="_3、order-by-优化" tabindex="-1"><a class="header-anchor" href="#_3、order-by-优化" aria-hidden="true">#</a> 3、order by 优化</h3><ol><li><p>MySQL 排序：</p><ul><li>Using filesort：通过扫描索引或者全表，读取满足条件的行，在排序缓冲区 sort buffer 中排序，性能低；</li><li><strong>Using index</strong>：通过有序索引顺序扫描之间返回有序结果，不需要额外排序，性能高；</li></ul></li><li><p>优化具体操作：</p><ul><li><p>不建立索引时，使用 filesort</p></li><li><p>多字段 order by 排序时：需要建立联合索引；</p></li><li><p>一个字段升序，一个字段降序：Using index，Using filesort</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 解决办法：建立索引时指定字段时升序还是降序</span>
<span class="token keyword">create</span> <span class="token keyword">index</span> idx_p_a <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> age <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>两个字段都降序时：Backword index scan</p></li></ul></li><li><p>优化原则</p><ul><li>排序字段建立合适的索引，多字段排序，建立联合索引更快；</li><li>一个升序一个降序时，创建索引时要指定排序规则；</li><li>如果必须使用 filesort ，数据量比较大的时候，可以增大排序缓冲区的大小 sort_buffer_size(256K)；</li></ul></li></ol><h3 id="_4、group-by-优化" tabindex="-1"><a class="header-anchor" href="#_4、group-by-优化" aria-hidden="true">#</a> 4、group by 优化</h3><ol><li>索引对分组的影响 <ul><li>Using temporary：没有建立索引的时候使用临时表，性能低；</li><li>Using index：使用到索引，性能高；</li></ul></li><li>优化 <ul><li>分组时，建立相关索引；</li><li>使用联合索引时，遵循最左原则；</li></ul></li></ol><h3 id="_5、limit-优化" tabindex="-1"><a class="header-anchor" href="#_5、limit-优化" aria-hidden="true">#</a> 5、limit 优化</h3><ol><li>数据量很大的时候，limit 越往后，速度越慢，效率越低；</li><li>优化： <ul><li>通过创建索引，覆盖索引，可以提升性能；</li><li>连接查询，再把覆盖查询到的结果作为临时表再进行查询；</li></ul></li></ol><h3 id="_6、count-优化" tabindex="-1"><a class="header-anchor" href="#_6、count-优化" aria-hidden="true">#</a> 6、count 优化</h3><ol><li><p>不同存储引擎：</p><ul><li>InnoDB ：count(*) 需要一行一行从数据库读取数据，累加结果；</li><li>MyISAM ：存储的时候存放了一个总条数的值，直接获取，效率高；条件查询，性能低；</li></ul></li><li><p>count 用法（面试）</p><figure><img src="`+S+`" alt="count 用法" tabindex="0" loading="lazy"><figcaption>count 用法</figcaption></figure><ol><li>count(主键)：遍历整张表，取 id；</li><li>count(字段)：需要取值，并且需要判断是否为 null；</li><li>count(*)：不需要取值</li><li>count(数字)：不需要取值</li></ol></li><li><p>排序效率</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span>主键<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span>字段<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_7、update-优化" tabindex="-1"><a class="header-anchor" href="#_7、update-优化" aria-hidden="true">#</a> 7、update 优化</h3><ol><li><p>InnoDB 引擎的三大特点：事务、外键、行级锁；</p></li><li><p>行锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;xx&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>	<span class="token comment"># 成功</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>	<span class="token comment"># 成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>表锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> phone <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&quot;曹操&quot;</span><span class="token punctuation">;</span>	<span class="token comment"># 表锁</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> phone <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>		<span class="token comment"># 出现阻塞</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>优化点</p><ul><li><strong>InnoDB 的行锁是针对索引加的锁，并不是针对记录加的锁，如果没有索引或者索引失效将导致行锁升级为表锁；</strong></li></ul></li></ol><h2 id="十、三范式" tabindex="-1"><a class="header-anchor" href="#十、三范式" aria-hidden="true">#</a> 十、三范式</h2><h3 id="_1、第一范式" tabindex="-1"><a class="header-anchor" href="#_1、第一范式" aria-hidden="true">#</a> 1、第一范式</h3><ul><li>每列都是不可再分的最小单元；</li></ul><h3 id="_2、第二范式" tabindex="-1"><a class="header-anchor" href="#_2、第二范式" aria-hidden="true">#</a> 2、第二范式</h3><ul><li>每个表只能描述一件事情，其他非主键字段完全依赖于主键字段；</li><li>针对多对多关系；</li></ul><h3 id="_3、第三范式" tabindex="-1"><a class="header-anchor" href="#_3、第三范式" aria-hidden="true">#</a> 3、第三范式</h3><ul><li>非主键不能传递依赖于主键字段（不要产生传递依赖）；</li></ul><h3 id="_4、总结" tabindex="-1"><a class="header-anchor" href="#_4、总结" aria-hidden="true">#</a> 4、总结</h3><ul><li>第一范式：有主键，具有原子性，字段不可分割；</li><li>第二范式：完全依赖，没有部分依赖；非主键字段完全依赖于主键字段；</li><li>第三范式：没有传递依赖；非主键字段不能传递依赖于主键字段；</li><li>注意：实际快发中，不是完全遵循三范式，会经常使用冗余字段；</li></ul><h2 id="十一、视图" tabindex="-1"><a class="header-anchor" href="#十一、视图" aria-hidden="true">#</a> 十一、视图</h2><p>不是重点</p><h3 id="_1、概述-1" tabindex="-1"><a class="header-anchor" href="#_1、概述-1" aria-hidden="true">#</a> 1、概述</h3><ul><li>视图（View）是一种虚拟存在的表，视图中的数据并不是在数据库中实际存在的，行和列数据来自定义视图查询中使用的表，并且是是使用视图是动态生成式；</li><li>视图值保存查询的 SQL 逻辑，不保存保存查询结果，所以创建视图时，主要的工作落在创建这条 SQL 查询语句上；</li></ul><h3 id="_2、创建" tabindex="-1"><a class="header-anchor" href="#_2、创建" aria-hidden="true">#</a> 2、创建</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">[</span>列表名称<span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADE</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3、查询" tabindex="-1"><a class="header-anchor" href="#_3、查询" aria-hidden="true">#</a> 3、查询</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 视图名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、修改" tabindex="-1"><a class="header-anchor" href="#_4、修改" aria-hidden="true">#</a> 4、修改</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">[</span>列表名称<span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADE</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">[</span>列表名称<span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token keyword">SELECT</span>语句 <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADE</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、删除" tabindex="-1"><a class="header-anchor" href="#_5、删除" aria-hidden="true">#</a> 5、删除</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 视图名称 <span class="token punctuation">[</span><span class="token punctuation">,</span> 视图名称<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="十二、存储过程" tabindex="-1"><a class="header-anchor" href="#十二、存储过程" aria-hidden="true">#</a> 十二、存储过程</h2><h3 id="_1、概述-2" tabindex="-1"><a class="header-anchor" href="#_1、概述-2" aria-hidden="true">#</a> 1、概述</h3><ul><li>经过实现编译并存储到数据库中的一段 SQL 的集合，类似于 Java 的方法；</li></ul><h3 id="_2、语法" tabindex="-1"><a class="header-anchor" href="#_2、语法" aria-hidden="true">#</a> 2、语法</h3><ol><li><p>创建</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> 参数列表 <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">BEGIN</span>
	<span class="token comment">-- SQL语句 </span>
<span class="token keyword">END</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询指定数据库的存储过程及状态信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>ROUTINES <span class="token keyword">WHERE</span> ROUTINE_SCHEMA <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询某个存储过程的定义</span>
<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称 <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CALL</span> 名称 <span class="token punctuation">(</span><span class="token punctuation">[</span> 参数 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">]</span> 存储过程名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">tables</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> test<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> test<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建存储过程,定义存储方法</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> batchInsert<span class="token punctuation">(</span><span class="token operator">in</span> args <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
<span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">-- 开启事务(重要!不开的话,100w数据需要论天算)</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;=</span> args <span class="token keyword">do</span>
	<span class="token keyword">insert</span> <span class="token keyword">into</span> test<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span> <span class="token keyword">value</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">&quot;软件工程-&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> i <span class="token operator">=</span> i<span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">#调用</span>
<span class="token keyword">call</span> batchInsert<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#查询指定数据库的名称的存储过程</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>ROUTINES <span class="token keyword">WHERE</span> ROUTINE_SCHEMA <span class="token operator">=</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">;</span>
<span class="token comment">#查询指定存储过程的详细信息</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">PROCEDURE</span> batchInsert<span class="token punctuation">;</span>

<span class="token comment">#删除指定的存储过程</span>
<span class="token keyword">drop</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> batchInsert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_3、变量" tabindex="-1"><a class="header-anchor" href="#_3、变量" aria-hidden="true">#</a> 3、变量</h3><ol><li><p>系统变量</p><ul><li><p>查看系统变量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> variables<span class="token punctuation">;</span> <span class="token comment">#所有变量</span>
<span class="token keyword">select</span> @@系统变量名 <span class="token comment">#查询指定变量</span>
<span class="token keyword">select</span> @<span class="token variable">@local_infile</span> <span class="token comment">#查看导入开关是否打开</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>设置系统变量值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token punctuation">[</span><span class="token keyword">session</span><span class="token operator">|</span><span class="token keyword">global</span><span class="token punctuation">]</span> 变量名<span class="token operator">=</span>值
<span class="token comment">#设置事务自动提交</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> autocommit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>用户自定义变量</p><ul><li><p>赋值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> <span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> <span class="token keyword">SET</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token variable">@var_name</span> :<span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> <span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> <span class="token variable">@var_name</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@var_name</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>局部变量</p><ul><li><p>声明</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DECLARE</span> 变量名 变量类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>赋值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> 变量名 <span class="token operator">=</span> 值 <span class="token punctuation">;</span> 
<span class="token keyword">SET</span> 变量名 :<span class="token operator">=</span> 值 <span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> 字段名 <span class="token keyword">INTO</span> 变量名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>演示</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> select_sy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
	<span class="token keyword">declare</span> user_count <span class="token keyword">int</span> <span class="token keyword">default</span>  <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> user_count <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>
	<span class="token keyword">select</span> user_count<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token keyword">call</span> select_sy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="十三、触发器" tabindex="-1"><a class="header-anchor" href="#十三、触发器" aria-hidden="true">#</a> 十三、触发器</h2><h3 id="_1、概述-3" tabindex="-1"><a class="header-anchor" href="#_1、概述-3" aria-hidden="true">#</a> 1、概述</h3><ul><li>在 insert \\ update \\ delete 之前或之后出发并执行触发器中的 SQL 语句的集合；</li></ul><h3 id="_2、类型" tabindex="-1"><a class="header-anchor" href="#_2、类型" aria-hidden="true">#</a> 2、类型</h3><ul><li>NEW OLD 是别名，用来引用触发器中发生变化的记录内容；</li></ul><table><thead><tr><th>触发器</th><th>NEW 或者 OLD</th></tr></thead><tbody><tr><td>INSERT</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE</td><td>OLD 表示修改之前的数据；NEW 表示将要或者已经修改之后的数据；</td></tr><tr><td>DELETE</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h3 id="_3、创建" tabindex="-1"><a class="header-anchor" href="#_3、创建" aria-hidden="true">#</a> 3、创建</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name 
BEFORE<span class="token operator">/</span><span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token operator">/</span><span class="token keyword">UPDATE</span><span class="token operator">/</span><span class="token keyword">DELETE</span> 
<span class="token keyword">ON</span> tbl_name <span class="token keyword">FOR EACH ROW</span> <span class="token comment">-- 行级触发器 BEGIN</span>
	trigger_stmt <span class="token punctuation">;</span> 
<span class="token keyword">END</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、查看" tabindex="-1"><a class="header-anchor" href="#_4、查看" aria-hidden="true">#</a> 4、查看</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> TRIGGERS <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5、删除-1" tabindex="-1"><a class="header-anchor" href="#_5、删除-1" aria-hidden="true">#</a> 5、删除</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 如果没有指定 schema_name，默认为当前数 据库 </span>
<span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token punctuation">[</span>schema_name<span class="token punctuation">.</span><span class="token punctuation">]</span>trigger_name <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、演示" tabindex="-1"><a class="header-anchor" href="#_6、演示" aria-hidden="true">#</a> 6、演示</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> user_log_test1 
<span class="token keyword">AFTER</span> <span class="token keyword">delete</span> 
<span class="token keyword">ON</span> <span class="token keyword">user</span> <span class="token keyword">FOR EACH ROW</span> <span class="token comment">-- 行级触发器</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">insert</span> <span class="token keyword">into</span> user_log <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>

<span class="token keyword">show</span> triggers<span class="token punctuation">;</span>

<span class="token keyword">delete</span>  <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> user_log_test <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="面试问题" tabindex="-1"><a class="header-anchor" href="#面试问题" aria-hidden="true">#</a> 面试问题</h2><p>1、查询怎么优化</p><ol><li>通过慢查询日志来找到具体的 SQL 语句；</li><li>没有所以就就建立索引；</li><li>如果有索引，还是慢查询，就使用 explain 来查看是否是索引失效；</li></ol><p>2、INSERT 如何优化</p><p>profile 来交接 SQL 的时间消耗都在哪里</p><p><code>SHOW GLOBAL STATUS LIKE &#39;COM_+类型&#39;;</code> 查看增删改查的执行频次；</p>`,219),R=[L];function O(I,D){return n(),a("div",null,R)}const C=s(A,[["render",O],["__file","MySQL.html.vue"]]);export{C as default};
