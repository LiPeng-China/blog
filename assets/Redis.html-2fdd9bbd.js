import{_ as a,X as e,Y as t,a1 as p,Z as s,F as i}from"./framework-bf6cbb95.js";const l="/blog/assets/AOF写后日志-5f122ac5.png",o="/blog/assets/Redis主从复制-7a739454.png",c="/blog/assets/主从同步原理-27d4fb8f.png",d="/blog/assets/主-从-从模式-0c64acf8.png",r="/blog/assets/网络连接异常情况-7928dc5c.png",u="/blog/assets/新主库的选定-c6216bee.png",k="/blog/assets/穿透型缓存-4c975180.png",v="/blog/assets/旁路型缓存-bce5bd6b.png",m="/blog/assets/只读缓存-1f83f482.png",b="/blog/assets/expires存储形式-04e03bc2.png",h={},g=s(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> Redis</span>
<span class="token title important"><span class="token punctuation">##</span> Redis 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 简介</span>
<span class="token title important"><span class="token punctuation">###</span> 应用场景</span>
<span class="token title important"><span class="token punctuation">##</span> Redis 安装使用</span>
<span class="token title important"><span class="token punctuation">###</span> 安装</span>
<span class="token title important"><span class="token punctuation">###</span> 文件概述</span>
<span class="token title important"><span class="token punctuation">###</span> 启动</span>
<span class="token title important"><span class="token punctuation">###</span> Redis 基本命令</span>
<span class="token title important"><span class="token punctuation">##</span> Redis 常用的5种数据类型</span>
<span class="token title important"><span class="token punctuation">###</span> String</span>
<span class="token title important"><span class="token punctuation">###</span> List</span>
<span class="token title important"><span class="token punctuation">###</span> Hash</span>
<span class="token title important"><span class="token punctuation">###</span> Set</span>
<span class="token title important"><span class="token punctuation">###</span> Zset</span>
<span class="token title important"><span class="token punctuation">##</span> AOF</span>
<span class="token title important"><span class="token punctuation">###</span> AOF 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 配置</span>
<span class="token title important"><span class="token punctuation">###</span> 日志如何实现</span>
<span class="token title important"><span class="token punctuation">###</span> 潜在风险</span>
<span class="token title important"><span class="token punctuation">###</span> 三种写回策略</span>
<span class="token title important"><span class="token punctuation">###</span> AOF 重写机制</span>
<span class="token title important"><span class="token punctuation">##</span> RDB</span>
<span class="token title important"><span class="token punctuation">###</span> 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 快照频率</span>
<span class="token title important"><span class="token punctuation">###</span> 混合使用 AOF 和 RDB</span>
<span class="token title important"><span class="token punctuation">###</span> Redis 持久化建议</span>
<span class="token title important"><span class="token punctuation">##</span> 主从复制</span>
<span class="token title important"><span class="token punctuation">###</span> 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 主从复制步骤</span>
<span class="token title important"><span class="token punctuation">###</span> 服务器宕机</span>
<span class="token title important"><span class="token punctuation">###</span> 主从同步原理</span>
<span class="token title important"><span class="token punctuation">###</span> 主从从模式</span>
<span class="token title important"><span class="token punctuation">###</span> 网路连接异常</span>
<span class="token title important"><span class="token punctuation">##</span> 哨兵模式</span>
<span class="token title important"><span class="token punctuation">###</span> 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 哨兵机制基本流程</span>
<span class="token title important"><span class="token punctuation">####</span> 监控</span>
<span class="token title important"><span class="token punctuation">####</span> 选主</span>
<span class="token title important"><span class="token punctuation">####</span> 通知</span>
<span class="token title important"><span class="token punctuation">###</span> 哨兵模式配置</span>
<span class="token title important"><span class="token punctuation">###</span> 新主库选定</span>
<span class="token title important"><span class="token punctuation">####</span> 筛选 + 打分</span>
<span class="token title important"><span class="token punctuation">###</span> 哨兵集群</span>
<span class="token title important"><span class="token punctuation">####</span> 判断主节点的主客观下线</span>
<span class="token title important"><span class="token punctuation">####</span> 选举一个哨兵作为 leader</span>
<span class="token title important"><span class="token punctuation">####</span> 主从故障转移</span>
<span class="token title important"><span class="token punctuation">##</span> 分片集群</span>
<span class="token title important"><span class="token punctuation">###</span> 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 搭建集群</span>
<span class="token title important"><span class="token punctuation">###</span> Hash Slot</span>
<span class="token title important"><span class="token punctuation">###</span> 集群中的数据操作</span>
<span class="token title important"><span class="token punctuation">###</span> 常用命令</span>
<span class="token title important"><span class="token punctuation">###</span> 故障演示</span>
<span class="token title important"><span class="token punctuation">##</span> 亿级访问量数据处理</span>
<span class="token title important"><span class="token punctuation">###</span> 场景描述</span>
<span class="token title important"><span class="token punctuation">###</span> 集合统计模式</span>
<span class="token title important"><span class="token punctuation">####</span> 聚合统计</span>
<span class="token title important"><span class="token punctuation">####</span> 排序统计</span>
<span class="token title important"><span class="token punctuation">####</span> 二值统计</span>
<span class="token title important"><span class="token punctuation">####</span> 基数统计</span>
<span class="token title important"><span class="token punctuation">###</span> 总结</span>
<span class="token title important"><span class="token punctuation">##</span> GeoSpatial</span>
<span class="token title important"><span class="token punctuation">###</span> 概述</span>
<span class="token title important"><span class="token punctuation">###</span> Geo 底层结构</span>
<span class="token title important"><span class="token punctuation">###</span> Geo 操作指令</span>
<span class="token title important"><span class="token punctuation">####</span> geoadd</span>
<span class="token title important"><span class="token punctuation">####</span> geopos</span>
<span class="token title important"><span class="token punctuation">####</span> geodist</span>
<span class="token title important"><span class="token punctuation">####</span> georadius</span>
<span class="token title important"><span class="token punctuation">###</span> 案例：查找附近的人</span>
<span class="token title important"><span class="token punctuation">##</span> Redis 事务处理</span>
<span class="token title important"><span class="token punctuation">###</span> 事务概述</span>
<span class="token title important"><span class="token punctuation">###</span> Redis 事务</span>
<span class="token title important"><span class="token punctuation">###</span> Redis 处理事务机制</span>
<span class="token title important"><span class="token punctuation">####</span> 原子性</span>
<span class="token title important"><span class="token punctuation">####</span> 一致性</span>
<span class="token title important"><span class="token punctuation">####</span> 隔离性</span>
<span class="token title important"><span class="token punctuation">####</span> 持久性</span>
<span class="token title important"><span class="token punctuation">##</span> Redis 缓存</span>
<span class="token title important"><span class="token punctuation">###</span> 概述</span>
<span class="token title important"><span class="token punctuation">###</span> 缓存的特征</span>
<span class="token title important"><span class="token punctuation">###</span> 缓存数据的删除和替换</span>
<span class="token title important"><span class="token punctuation">####</span> 过期数据</span>
<span class="token title important"><span class="token punctuation">####</span> 删除策略</span>
<span class="token title important"><span class="token punctuation">#####</span> 定时删除</span>
<span class="token title important"><span class="token punctuation">#####</span> 惰性删除</span>
<span class="token title important"><span class="token punctuation">#####</span> 定期删除</span>
<span class="token title important"><span class="token punctuation">####</span> 逐出算法</span>
<span class="token title important"><span class="token punctuation">###</span> 缓存异常</span>
<span class="token title important"><span class="token punctuation">####</span> 数据不一致</span>
<span class="token title important"><span class="token punctuation">####</span> 缓存雪崩</span>
<span class="token title important"><span class="token punctuation">####</span> 缓存击穿</span>
<span class="token title important"><span class="token punctuation">####</span> 缓存穿透</span>
<span class="token title important"><span class="token punctuation">##</span> Jedis 操作 Redis</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="零-docker-容器" tabindex="-1"><a class="header-anchor" href="#零-docker-容器" aria-hidden="true">#</a> 零：Docker 容器</h2><p>拉取镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis:7.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> redis/data redis/conf
 <span class="token function">touch</span> redis/conf/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> myredis <span class="token punctuation">\\</span>
		  <span class="token parameter variable">-v</span> /home/taiyi/docker_data/redis/data/:/data <span class="token punctuation">\\</span>
		  <span class="token parameter variable">-v</span> /home/taiyi/docker_data/redis/conf/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
		  <span class="token parameter variable">-d</span> redis:7.2 <span class="token punctuation">\\</span>
		  redis-server /etc/redis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简化命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis7 <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis:7.0 <span class="token parameter variable">--bind</span> <span class="token number">0.0</span>.0.0 --protected-mode no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="一、redis-概述" tabindex="-1"><a class="header-anchor" href="#一、redis-概述" aria-hidden="true">#</a> 一、Redis 概述</h2><h3 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介" aria-hidden="true">#</a> 1、简介</h3><ul><li>Redis（Remote Dictionary Server）：一个开源的 Key-Value 的存储系统；</li><li>支持存储的 Value 类型：String（字符串）、list（链表）、set（集合）、zset（sorted set 有序集合）、hash（哈希）；都支持使用 push/pop、add/remove、获取并集、交集、差集等一些相关操作，操作是原子性的；</li><li>Redis 支持各种不同方式的排序；</li><li>Redis （与 Memcached 相同） 存储在内存中；</li><li>Redis 会周期性的把更新的数据写入磁盘，或者把修改的操作追加到记录文件；</li><li>Redis 支持集群，实现 Master-Slave（主从）同步操作；</li></ul><h3 id="_2、应用场景" tabindex="-1"><a class="header-anchor" href="#_2、应用场景" aria-hidden="true">#</a> 2、应用场景</h3><ul><li>缓存：配合关系型数据库做高速缓存</li><li>计数器：进行自增自减运算</li><li>时效性数据：利用 expire 过期，例如：手机验证码</li><li>海量数据统计：利用位图，统计用户是否是会员、日活统计、文章已读统计、是否参加过某次活动</li><li>会话缓存：使用 Redis 统一存储多台服务器用到的 Session 信息</li><li>分布式队列/阻塞队列：通过 List 双向链表实现读取和阻塞队列</li><li>分布式锁：Redis 自带的 setNx 命令实现分布式锁</li><li>热点数据存储：最新文章、最新评论，可以只用 Redis 的 List 存储，ltrim 去除热点数据，文章推荐</li><li>社交系统：通过 Set 功能实现，交集、并集实现获取共同好友，差集实现好友推荐，文章推荐</li><li>排行榜：利用 sorted-set 的有序性，实现排行榜功能，取 top n</li><li>延迟队列：利用消费者和生产者模式实现延迟队列</li><li>去重复数据：利用 Set 集合，去除大量重复数据</li><li>发布订阅模式：pub/sub 模式</li></ul><h2 id="二、redis-安装使用" tabindex="-1"><a class="header-anchor" href="#二、redis-安装使用" aria-hidden="true">#</a> 二、Redis 安装使用</h2><h3 id="_1、安装" tabindex="-1"><a class="header-anchor" href="#_1、安装" aria-hidden="true">#</a> 1、安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis-xxx.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> redis-xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、文件概述" tabindex="-1"><a class="header-anchor" href="#_2、文件概述" aria-hidden="true">#</a> 2、文件概述</h3><p>Redis 会被安装到 /usr/local/bin 目录下：</p><ul><li>redis-benchmark：性能测试工具</li><li>redis-check-aof：修复 aof 持久化文件</li><li>redis-check-rdb：修复 rdb 持久化文件</li><li>redis-cli：Redis 命令行工具</li><li>redis-sentinel：Redis 集群哨兵使用</li><li>redis-server：启动 Redis</li></ul><h3 id="_3、启动" tabindex="-1"><a class="header-anchor" href="#_3、启动" aria-hidden="true">#</a> 3、启动</h3><ul><li><p>前台启动（不推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>后台启动（推荐）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /opt/redis-x.x.x/redis.conf
<span class="token comment"># 更改如下设置：no --&gt; yes，允许后台启动</span>
daemonize <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动命令行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ping</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>退出（Redis 服务和 cli 共同退出）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">shutdown</span>
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>退出（只退 cli）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_4、redis-基本命令" tabindex="-1"><a class="header-anchor" href="#_4、redis-基本命令" aria-hidden="true">#</a> 4、Redis 基本命令</h3><ol><li>默认 16 个数据库，从 0 开始，初始默认使用 0 号库，使用 select 命令切换数据库：<code>select 1</code></li><li>统一密码管理，所有数据库使用同样的密码</li><li><code>dbsize</code>：查看当前数据库 key 的数量</li><li><code>flushdb</code>：清空当前数据库</li><li><code>flushall</code>：情况所有数据库</li><li><code>keys *</code>：查看当前数据库所有 key</li><li><code>exists &lt;key&gt;</code>：判断指定的 key 是否存在</li><li><code>type &lt;key&gt;</code>：查看 key 的类型</li><li><code>object encoding &lt;key&gt;</code>：查看底层数据类型</li><li><code>del &lt;key&gt;</code>：删除指定的 key 数据</li><li><code>unlink &lt;key&gt;</code>：非阻塞删除，仅仅是将 key 从 keyspace 元数据中删除，真正的删除会在后续中做异步操作</li><li><code>expire &lt;key&gt; &lt;second&gt;</code>：给指定的 key 设置过期时间，以秒为单位</li><li><code>ttl &lt;key&gt;</code>：查看 key 的过期时间；-1：表示永不过期，-2：表示已过期</li></ol><h2 id="三、redis-常用的五种数据类型" tabindex="-1"><a class="header-anchor" href="#三、redis-常用的五种数据类型" aria-hidden="true">#</a> 三、Redis 常用的五种数据类型</h2><h3 id="_1、string-字符串" tabindex="-1"><a class="header-anchor" href="#_1、string-字符串" aria-hidden="true">#</a> 1、String 字符串</h3><h4 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介" aria-hidden="true">#</a> 1.1 简介</h4><ul><li>String 类型是 Redis 中最常见的一种类型</li><li>String 类型是二进制安全的，可以存放字符串、数值、JSON、图像数据</li><li>value 存储最大数据量是 512M</li></ul><h4 id="_1-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_1-2-常用命令" aria-hidden="true">#</a> 1.2 常用命令</h4><ul><li><p>添加键值对</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>nx：当数据库 key 不存在时，将 key-value 添加至数据库</p><p>xx：当数据库 key 存在时，可以将 key-value 添加至数据库，与 nx 参数互斥</p><p>ex：设置 key-value 添加到数据库，并设置 key 的超时时间（以秒为单位）</p><p>px：设置 key-value 添加到数据库，并设置 key 的超时时间（以毫秒为单位），与 ex 互斥</p></li><li><p>查询对应键值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>get <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将给定的值追加到 key 的末尾</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>append <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取值的长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>strlen <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>只有 key 不存在时，设置 key-value 加入到数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setnx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加键值对，同时设置过期时间（以秒为单位）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>seconds<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 key 中存储的数字 +1 处理，只能对数字值操作。如果是空，值为 1</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>incr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 key 中存储的数字 -1 处理，只能对数字值操作。如果是空，值为 1</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>decr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 key 中存储的数字值增加指定步长的数值，如果是空，值为步长。(具有原子性)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>incrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>increnment<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 key 中存储的数字值减少指定步长的数值，如果是空，值为步长。(具有原子性)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>decrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>decrenment<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>同时设置一个或多个 key-value 值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mset <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>同时获取一个或多个 value 值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mget <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>当所有给定的 key 都不存在时，同时设置一个或多个 key-value 值（具有原子性）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>msetnx <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将给定的 key，获取从 start（包含）到 end（包含）的值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>getrange/substr <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>start<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>end<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>从偏移量 offset 开始，用 value 去覆盖 key 中存储的字符串值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>offset<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>对给定的 key 设置新值，同时返回旧值。如果 key 不存在，则添加一个 key-value 值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>getset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_1-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_1-3-应用场景" aria-hidden="true">#</a> 1.3 应用场景</h4><ul><li><p>单值缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> key value
get key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对象缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> stu:001 value<span class="token punctuation">(</span>json<span class="token punctuation">)</span>
mset stu:001:name 张三 stu:001:age <span class="token number">18</span> stu:001:gender 男
mget stu:001:name stu:001:age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分布式锁</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setnx key:001 <span class="token boolean">true</span>	<span class="token comment"># 返回 1 代表枷锁成功</span>
setnx key:001 <span class="token boolean">true</span>	<span class="token comment"># 返回 0 代表加锁失败</span>
<span class="token comment"># ... 业务操作</span>
del key:001			<span class="token comment"># 执行完业务释放锁</span>
<span class="token builtin class-name">set</span> key:001 <span class="token boolean">true</span> ex <span class="token number">20</span> nx	<span class="token comment"># 防止程序意外终止导致死锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>计数器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>incr article:read:1001		<span class="token comment"># 统计文章阅读数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>分布式系统全局序列号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>incrby orderid <span class="token number">100</span>			<span class="token comment"># 批量生成序列号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_2、list-列表" tabindex="-1"><a class="header-anchor" href="#_2、list-列表" aria-hidden="true">#</a> 2、List 列表</h3><h4 id="_2-1-简介" tabindex="-1"><a class="header-anchor" href="#_2-1-简介" aria-hidden="true">#</a> 2.1 简介</h4><ul><li>Redis 列表是简单的字符串列表，单值多键，按照插入顺序排序；可以添加一个元素到列表的头部（左）或者尾部（右）</li><li>一个列表最多可以包含 2^32 -1 个元素</li><li>底层是一个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</li></ul><h4 id="_2-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_2-2-常用命令" aria-hidden="true">#</a> 2.2 常用命令</h4><ul><li><p>从左侧插入一个或多个值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lpush <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将一个或多个值插入到 <strong>已存在</strong> 的列表头部</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lpushx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取列表指定范围内的元素，0：左边第一位；-1：右边第一位，0~-1：取出所有</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>start<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>stop<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>从右侧插入一个或多个值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rpush <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将一个或多个值插入到已存在的列表尾部</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rpushx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>移除并获取列表中左边第1个元素，count 表明获取的总数量，返回的为移除的元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lpop <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>移除并获取列表中右边第1个元素，count 表明获取的总数量，返回的为移除的元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rpop <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>移除源列表的尾部元素（右1），将该元素添加到目标列表头部（左1），并返回</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rpoplpush <span class="token operator">&lt;</span>source<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过索引获取列表中的元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lindex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>index<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取列表长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>llen <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 pivot 基准元素前（后）插入 element ，如果 key 不存在，返回 0；如果 pivot 不存在，返回 -1；操作成功，返回列表长度；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>linsert <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> before <span class="token operator">|</span> after <span class="token operator">&lt;</span>pivot<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>element<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>根据 count 值，移除列表中 与 element 相等的值；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lrem <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>count<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>element<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>count = 0：移除表中所有与参数相等的值</p><p>count &gt; 0：表头到表尾，移除等数量的元素</p><p>count &lt; 0：表尾到表头，移除等数量的元素</p></li><li><p>设置给定索引位置的值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>index<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>element<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>对列表进行修剪，只保留给定区间的元素，不在指定区间的被删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ltrim <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>start<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>stop<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>阻塞式移除指定 key 的元素，如果 key 中没有元素，就等待，直到有元素或超时，执行结束</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>brpop <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token function">timeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_2-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-3-应用场景" aria-hidden="true">#</a> 2.3 应用场景</h4><ul><li><p>数据队列</p><ul><li>堆栈 stack = lpush + lpop</li><li>队列 queue = lpush + rpop</li><li>阻塞式消息队列 blocking mq = lpush + brpop</li></ul></li><li><p>订阅号时间线</p><p>lrange key start stop</p></li></ul><h3 id="_3、hash-哈希" tabindex="-1"><a class="header-anchor" href="#_3、hash-哈希" aria-hidden="true">#</a> 3、Hash 哈希</h3><h4 id="_3-1-简介" tabindex="-1"><a class="header-anchor" href="#_3-1-简介" aria-hidden="true">#</a> 3.1 简介</h4><p>Hash 是 String 类型的 kay-value，特别适合存储对象，类似于 Java 中的 Map；</p><p>假设场景：需要在 Redis 中存储学生对象（id，name，age，gender），有以下集中处理方式：</p><ul><li>方式一：用 key 存储 id，用 value 存储序列化后的用户对象（如果用户属性需要修改，操作复杂，开销较大）</li><li>方式二：用 key 存储学生 id + 属性名，value 存储属性值（用户 id 数据冗余）</li><li>方式三：用 key 存储学生 id，用 value 存储 field+value 的 hash。通过 key（id）+ field（属性）可以操作对象的数据</li></ul><h4 id="_3-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-2-常用命令" aria-hidden="true">#</a> 3.2 常用命令</h4><ul><li><p>为 hash 表的字段赋值，如果字段在 hash 表中存在，则会被覆盖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hset <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Redis 4.0.0 中被弃用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hmset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>字段不存在时，设置 hash 表中的字段值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hsetnx <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回 hash 表中给定的字段值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hget <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回 hash 表中所有给定的字段值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hmget <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取 hash 表中指定 key 的所有字段和值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hgetall <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断 hash 表中指定的字段是否存在，存在：1，否则：0</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hexists <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取 hash 表中的所有字段</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hkeys <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取 hash 表中的所有值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hvals <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取 hash 表中的 field 数量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hlen <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除一个或多个 hash 表字段</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hdel <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>field<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>为哈希表 key 中指定的 field 字段的 <strong>整数</strong> 值加上增加 increment</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hincrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>increment<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>为哈希表 key 中指定的 field 字段的 <strong>浮点数</strong> 值加上增加 increment</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hincrbyfloat <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>field<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>increment<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_3-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-3-应用场景" aria-hidden="true">#</a> 3.3 应用场景</h4><ul><li><p>对象缓存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hset stu:001 name zhangsan age <span class="token number">20</span> gender <span class="token function">man</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>电商购物车操作</p><ul><li><p>用户 id 作为 key，商品 id 作为 field，商品数量作为 value</p></li><li><p>添加商品：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hset user:001 s:001 <span class="token number">1</span>
hset user:001 s:005 <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>增减商品数量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hincrby user:001 s:001 <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看购物车商品数量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hlen user:001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除商品：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hdel user:001 s:001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取所有商品：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hgetall user:001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_4、set-集合" tabindex="-1"><a class="header-anchor" href="#_4、set-集合" aria-hidden="true">#</a> 4、Set 集合</h3><h4 id="_4-1-简介" tabindex="-1"><a class="header-anchor" href="#_4-1-简介" aria-hidden="true">#</a> 4.1 简介</h4><p>Set 是 String 类型元素的无序集合。对外提供功能和 List 相似，是一个 列表功能。集合成员是唯一的。</p><h4 id="_4-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_4-2-常用命令" aria-hidden="true">#</a> 4.2 常用命令</h4><ul><li><p>将一个或多个元素加入到集合中；如果集合中已包含该成员元素，则忽略；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>member<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回集合中所有成员</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smembers <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断给定的成员元素是否是集合中的成员，如果是，返回 1 ；否则返回 0</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sismember <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回集合中元素数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>scard <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>移除集合中一个或多个元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>srem <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>member<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>移除并返回集合中一个或 count 个随机元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>spop <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>count<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>与 spop 类似，返回随机元素，不做移除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>srandmember <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>count<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 member 元素从 source 源移动到 destination 目标</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smove <span class="token operator">&lt;</span>source<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回给定集合的交集（共同包含）元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sinter <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回给定所以集合的交集，并存储到 destination 目标中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sinterstore <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回给定集合的并集（所有）元素</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sunion <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回给定所以集合的并集，并存储到 destination 目标中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sunionstore <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回给定集合的差集（key1 中不包含 key2 的元素）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sdiff</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回给定所有集合的差集，并存储到 destination 目标中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sdiffstore <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>key<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_4-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-3-应用场景" aria-hidden="true">#</a> 4.3 应用场景</h4><ul><li><p>抽奖</p><ul><li><p>参与抽奖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd cj001 user:18400001111 user:13000001111 user:16600001111
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看所有参与用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smembers cj001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实现抽奖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>spop cj001 <span class="token number">3</span>	<span class="token comment"># 中奖后不得参与后续抽奖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>srandmember cj001 <span class="token number">3</span>		<span class="token comment"># 中奖后可以参与后续抽奖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>快手/抖音短视频点赞</p><ul><li><p>点赞</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd like:friend001 user:001
sadd like:friend001 user:002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>取消点赞</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>srem like:friend001 user:001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断用户是否点赞</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sismember like:friend001 user:001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>显示点赞用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smembers like:friend001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取点赞次数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>scard like:frind:001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>关注模型：sinter 交集 sunion 并集 sdiff 差集</p><ul><li><p>微博 共同关注</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd g:list:u001 <span class="token number">1001</span>
sadd g:list:u002 <span class="token number">1001</span>
sinter 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>QQ 共同好友：sinter 交集</p></li><li><p>快手 可能认识的人：sdiff 差集</p></li></ul></li></ul><h3 id="_5、zset-有序集合" tabindex="-1"><a class="header-anchor" href="#_5、zset-有序集合" aria-hidden="true">#</a> 5、Zset 有序集合</h3><h4 id="_5-1-简介" tabindex="-1"><a class="header-anchor" href="#_5-1-简介" aria-hidden="true">#</a> 5.1 简介</h4><ul><li>有序集合是 String 类型元素的集合，不允许出现重复成员</li><li>每个元素会关联一个 double 类型的分数，Redis 是通过分数为集合中的成员进行从小到大的排序</li><li>有序集合的成员是唯一的，但分数可以重复</li><li>成员因为有序，可以根据分数或者次序来快速获取一个范围内的元素</li></ul><h4 id="_5-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_5-2-常用命令" aria-hidden="true">#</a> 5.2 常用命令</h4><ul><li><p>将一个或多个元素及其分数加入到有序集合中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zadd <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>score<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>score<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回有序集合指定区间的成员（byscore 按分数区间，bylex 按字典区间，rev 反向排序（ <code>&lt;max&gt; &lt;min&gt;</code> ），limit 分页（offset 偏移量，count 返回总数），withscores 返回时带有对应的分数）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>min<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>max<span class="token operator">&gt;</span> <span class="token punctuation">[</span>byscore<span class="token operator">|</span>bylex<span class="token punctuation">]</span> <span class="token punctuation">[</span>rev<span class="token punctuation">]</span> <span class="token punctuation">[</span>limit offset count<span class="token punctuation">]</span> <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回集合反转后的成员</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrevrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>start<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>stop<span class="token operator">&gt;</span> <span class="token punctuation">[</span>limit offset count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>参考 zrange 用法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrangebyscore <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>min<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>max<span class="token operator">&gt;</span> <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token punctuation">[</span> limit offset count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>参考 zrange 用法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrevrangebyscore <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>max<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>min<span class="token operator">&gt;</span> <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span> <span class="token punctuation">[</span> limit offset count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过字典区间返回有序集合的成员</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrangebylex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>min<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>max<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>limit offset count<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>减号最小值，加号最大值；[ 表示包含指定值，(表示不包含指定值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrangebylex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> - +
zrangebylex <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span>aa <span class="token punctuation">(</span>ac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>获取集合中成员数量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zcard <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>为集合中指定成员分数加上增量 increnment</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zincrby <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>increnment<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>移除集合的一个或多个成员</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrem <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>member<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>统计集合中指定区间分数（包含）的成员数量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zcount <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>min<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>max<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取集合中成员的索引位置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrank <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取集合中成员的分数值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zscore <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_5-3-应用场景" tabindex="-1"><a class="header-anchor" href="#_5-3-应用场景" aria-hidden="true">#</a> 5.3 应用场景</h4><ul><li><p>按时间先后顺序排序：朋友圈点赞</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zadd  <span class="token number">1656667779666</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>热搜、微博、今日头条、快手</p><p>获取 topK</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>zrevrange <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token number">300</span> <span class="token number">10</span> limit <span class="token number">0</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="四、aof" tabindex="-1"><a class="header-anchor" href="#四、aof" aria-hidden="true">#</a> 四、AOF</h2><h3 id="_1、aof-概述" tabindex="-1"><a class="header-anchor" href="#_1、aof-概述" aria-hidden="true">#</a> 1、AOF 概述</h3><p>Redis 的持久化主要应用 AOF（Append Only File）和 RDB 两大机制；</p><p>AOF 以日志形式来记录每个写操作（增量保存），将 Redis 执行过的所有写指令全部记录下来（读操作不记录）。只许追加文件，但不可以改写文件，Redis 启动之初会读取该文件，重新构建数据。</p><h3 id="_2、aof-配置" tabindex="-1"><a class="header-anchor" href="#_2、aof-配置" aria-hidden="true">#</a> 2、AOF 配置</h3><p>AOF 默认不开启，默认使用 RDB 持久化，在 redis.conf 中开启：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>appendonly <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认文件名：appendonly.aof</p><p>默认是启动后的相对路径：Redis 在哪里启动，appendonly.aof 文件就在哪里生成</p><h3 id="_3、aof-日志如何实现" tabindex="-1"><a class="header-anchor" href="#_3、aof-日志如何实现" aria-hidden="true">#</a> 3、AOF 日志如何实现</h3><p>数据库写前日志（Write Ahead Log，WAL）：在实际写数据库前，先把修改的数据记录到日志文件中，以便发生故障时，恢复；</p><p>AOF 日志是写后日志：Redis 先执行命令，把数据写入内存中，然后才去记录日志；</p><figure><img src="`+l+`" alt="AOF写后日志" tabindex="0" loading="lazy"><figcaption>AOF写后日志</figcaption></figure><p>查看 AOF 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*2				<span class="token comment"># 接下来的命令由2个指令构成</span>
<span class="token variable">$6</span>				<span class="token comment"># 第1个指令有3个字节</span>
SELECT			<span class="token comment"># 第一个指令</span>
<span class="token variable">$1</span>				<span class="token comment"># 第2个指令有1个字节</span>
<span class="token number">0</span>				<span class="token comment"># 第2哥指令</span>
*3				<span class="token comment"># 接下来的命令由3个指令构成</span>
<span class="token variable">$3</span>				<span class="token comment"># 第1个指令有3个字节</span>
<span class="token builtin class-name">set</span>				<span class="token comment"># 第1个指令</span>
<span class="token variable">$2</span>				<span class="token comment"># 第2个指令有2个字节</span>
k1				<span class="token comment"># 第2个指令</span>
<span class="token variable">$2</span>				<span class="token comment"># 第3个指令有2个字节</span>
v1				<span class="token comment"># 第3个指令</span>
*3
<span class="token variable">$3</span>
<span class="token builtin class-name">set</span>
<span class="token variable">$2</span>
k2
<span class="token variable">$2</span>
v2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么使用写后日志？</p><ol><li>Redis 为了避免检查开销，向 AOF 中记录日志，不做检查。如果写前执行，有可能会将错误指令记录在日志中，在使用 Redis 恢复日志时，可能会出现错误；</li><li>不会阻塞当前的写操作；</li></ol><h3 id="_4、aof-潜在风险" tabindex="-1"><a class="header-anchor" href="#_4、aof-潜在风险" aria-hidden="true">#</a> 4、AOF 潜在风险</h3><ol><li>AOF 可能由于异常原因被损坏。可以使用 Redis 自带的命令 redis-check-aof --fix appendonly.aof ，修复成功，可以正确启动；</li><li>执行完写操作，还没写入日志，系统宕机，导致数据永久丢失（Redis 做为数据库存储的情况）；</li><li>AOF 避免了对当前指令的阻塞，但可能会由于磁盘写入压力较大，对下一个操作带来阻塞风险；</li></ol><h3 id="_5、aof-三种写回策略" tabindex="-1"><a class="header-anchor" href="#_5、aof-三种写回策略" aria-hidden="true">#</a> 5、AOF 三种写回策略</h3><p>redis.conf 配置文件：appendfsync</p><table><thead><tr><th>选项</th><th>写日志时机</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>always</td><td>同步写回</td><td>每个写指令执行完，立即同步将指令写入磁盘日志文件</td><td>数据可靠性高，基本不会丢失</td><td>对性能影响较大</td></tr><tr><td>everysec（默认）</td><td>每秒写回</td><td>每个写指令执行完，先把日志写到 AOF 文件的内存缓冲区，每隔1秒把缓冲区内容写入磁盘</td><td>性能适中</td><td>服务器宕机是，会丢失上1秒的数据</td></tr><tr><td>no</td><td>操作系统控制写回</td><td>每个写指令执行完，先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时把缓冲区的内容写入磁盘</td><td>性能最高</td><td>服务器宕机时，丢失数据较多</td></tr></tbody></table><h3 id="_6、aof-重写机制" tabindex="-1"><a class="header-anchor" href="#_6、aof-重写机制" aria-hidden="true">#</a> 6、AOF 重写机制</h3><h4 id="_6-1-概述" tabindex="-1"><a class="header-anchor" href="#_6-1-概述" aria-hidden="true">#</a> 6.1 概述</h4><p>为什么？AOF 文件变得越来越大，带来性能问题：Redis 重启恢复数据时会很耗时。怎么解决？想办法对 AOF 文件进行瘦身？</p><p>键值对被很多条写操作修改过，实际上我们只需要记录最后的键值对即可，其余都是冗余的；</p><p>Redis 根据数据库现有数据，创建一个新的 AOF 文件，读取数据库中所有键值对，重新对应一条命令写入；</p><p>命令：<code>bgrewriteaof</code></p><h4 id="_6-2-aof-重写相关配置" tabindex="-1"><a class="header-anchor" href="#_6-2-aof-重写相关配置" aria-hidden="true">#</a> 6.2 AOF 重写相关配置</h4><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">auto-aof-rewrite-percentage</span> <span class="token value attr-value">100</span>
<span class="token key attr-name">auto-aof-rewrite-min-size</span> <span class="token value attr-value">64mb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 AOF 文件超过 64MB，且比上次重写后的大小增加了 100%，自动触发重写。</p><h4 id="_6-3-aof-重写流程" tabindex="-1"><a class="header-anchor" href="#_6-3-aof-重写流程" aria-hidden="true">#</a> 6.3 AOF 重写流程</h4><ol><li><code>bgrewriteaof</code> 子进程（不是线程）触发重写，判断当前是否有重写正在运行，如果有，则等待重写结束后再执行</li><li>主进程 fork 出一个子进程，执行重写操作，保证主进程不阻塞，可以继续执行命令</li><li>子进程循环遍历 Redis 内存中的所有数据到临时文件，客户端的写请求同时写入 aof 缓冲区 和 aof 重写缓冲区。保证原 AOF 文件完整以及新的 AOF 文件生成期间的新数据修改操作不会丢失</li><li>子进程完成新 AOF 文件以后，向主进程发送信号，主进程更新统计信息</li><li>主进程把 AOF 重写缓冲区中的数据写入到新的 AOF 文件</li><li>用新 AOF 文件覆盖掉旧 AOF 文件，完成 AOF 重写</li></ol><h2 id="五、rdb" tabindex="-1"><a class="header-anchor" href="#五、rdb" aria-hidden="true">#</a> 五、RDB</h2><h3 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述" aria-hidden="true">#</a> 1、概述</h3><ul><li>RDB：Redis DataBase，内存快照，记录内存中某一时刻数据的状态（全量快照）</li><li>与 AOF 相比，RDB 记录的是数据，不是操作指令，所以恢复快（优点）</li><li>Redis 提供两种命令生成 RDB 文件： <ul><li>save：在主线程中执行，会导致阻塞</li><li>bgsave：创建一个子进程，专门用来写 RDB，避免主线程阻塞，默认配置</li></ul></li><li>案例：6GB 内存，磁盘写入 0.3GB/s ，需要 20S，完成 RDB 文件的生成，这期间的写操作怎么办？ <ul><li>处理技术：写时复制技术（Copy-On-Write）：在执行快照处理时，仍然继续执行写操作</li></ul></li></ul><h3 id="_2、快照频率" tabindex="-1"><a class="header-anchor" href="#_2、快照频率" aria-hidden="true">#</a> 2、快照频率</h3><p>redis.conf 配置文件中设置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#   * After 3600 seconds (an hour) if at least 1 change was performed</span>
<span class="token comment">#   * After 300 seconds (5 minutes) if at least 100 changes were performed</span>
<span class="token comment">#   * After 60 seconds if at least 10000 changes were performed</span>
<span class="token comment">#</span>
<span class="token comment"># You can set these explicitly by uncommenting the following line.</span>
<span class="token comment">#</span>
<span class="token comment"># save 3600 1 300 100 60 10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主进程 fork bgsave 进程时，是阻塞的，频率太快，主进程频繁 fork 子进程被阻塞。</p><h3 id="_3、混合使用-aof-和-rdb" tabindex="-1"><a class="header-anchor" href="#_3、混合使用-aof-和-rdb" aria-hidden="true">#</a> 3、混合使用 AOF 和 RDB</h3><p>通过 redis.conf 配置文件打开 aof 和混合配置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">appendonly</span> <span class="token value attr-value">yes</span>

<span class="token key attr-name">aof-use-rdb-preamble</span> <span class="token value attr-value">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>混合过程：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> k1 v1
<span class="token builtin class-name">set</span> k2 v2
<span class="token builtin class-name">set</span> k3 v3
bgrewriteaof
<span class="token builtin class-name">set</span> k4 v4
<span class="token builtin class-name">set</span> k5 v5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 AOF 文件中前半部分是 RDB 文件内容，rewrite 之后，是 AOF 文件内容</p><h3 id="_4、对-redis-持久化处理的建议" tabindex="-1"><a class="header-anchor" href="#_4、对-redis-持久化处理的建议" aria-hidden="true">#</a> 4、对 Redis 持久化处理的建议</h3><ul><li>如果服务器使用 Redis 做缓冲，可以不使用任何持久化方式</li><li>数据不能丢失，AOF+RDB 混合使用是一个好选择</li><li>数据不要求非常严格，允许分钟级别的丢失，可以使用 RDB</li><li>如果只使用 AOF，建议配置策略 everysec，在可靠性和性能之间做折中</li><li>如果磁盘允许，尽量避免 AOF 重写的频率，将默认值 64mb 修改</li></ul><h2 id="六、主从复制" tabindex="-1"><a class="header-anchor" href="#六、主从复制" aria-hidden="true">#</a> 六、主从复制</h2><h3 id="_1、概述-1" tabindex="-1"><a class="header-anchor" href="#_1、概述-1" aria-hidden="true">#</a> 1、概述</h3><p>为什么？单点故障和数据一致性。</p><p>主从库之间采用读写分离的方式：</p><ul><li>读操作：主库、从库都可以处理</li><li>写操作：只能写到主库执行，然后再将主库同步给从库</li></ul><p>实现读写分离，性能扩展，容灾快速恢复</p><figure><img src="`+o+`" alt="Redis主从复制" tabindex="0" loading="lazy"><figcaption>Redis主从复制</figcaption></figure><h3 id="_2、主从复制步骤" tabindex="-1"><a class="header-anchor" href="#_2、主从复制步骤" aria-hidden="true">#</a> 2、主从复制步骤</h3><ol><li><p>关闭 AOF，开启后台启动</p></li><li><p>编辑三个redis 的配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">include</span> <span class="token value attr-value">/usr/local/redis/redis.conf</span>
<span class="token key attr-name">pidfile</span> <span class="token value attr-value">/var/run/reids_6379.pid</span>
<span class="token key attr-name">port</span> <span class="token value attr-value">6379</span>
<span class="token key attr-name">dbfilename</span> <span class="token value attr-value">dump6379.rdb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>分别启动三个服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server redis_6379.conf
redis-server redis_6380.conf
redis-server redis_6381.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在三个客户端，分别模拟连接三个不同的服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-p</span> <span class="token number">6379</span>
redis-cli <span class="token parameter variable">-p</span> <span class="token number">6380</span>
redis-cli <span class="token parameter variable">-p</span> <span class="token number">6381</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看服务器状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>info replication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在 6380 和 6381 上调用 replicaof ，将其从属于 6379</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>replicaof <span class="token number">127.0</span>.0.1 <span class="token number">6379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在主库上可以写入数据，从库不能写入数据</p></li><li><p>主库和从库都可以读数据</p></li></ol><h3 id="_3、服务器宕机演示" tabindex="-1"><a class="header-anchor" href="#_3、服务器宕机演示" aria-hidden="true">#</a> 3、服务器宕机演示</h3><ol><li>从服务器宕机 <ul><li>6381 宕机：shutdown</li><li>在主服务器可以正常写入数据</li><li>6379 重新连上主服务器，可以同步主服务器数据，自己的数据丢失（如果有独属于自己的数据）</li></ul></li><li>主服务器宕机 <ul><li>6379 宕机：shutdown</li><li>从服务器上正常读取数据</li><li>从服务显示主服务：down</li><li>主服务器重启启动，从服务器上显示主服务器状态：up</li></ul></li></ol><h3 id="_4、主从同步原理" tabindex="-1"><a class="header-anchor" href="#_4、主从同步原理" aria-hidden="true">#</a> 4、主从同步原理</h3><figure><img src="`+c+'" alt="主从同步原理" tabindex="0" loading="lazy"><figcaption>主从同步原理</figcaption></figure><ol><li><p>第一阶段：</p><p>主从建立连接，协商同步。从库和主库建立连接，告诉主库即将进行同步操作。主库需要确认并回复，主从就可以开始进行同步处理了。</p><p>从库想主库发送 psync 指令，包含两个参数：一个是主库的 runID，另一个是复制进度 offset</p><ul><li>runID：是每个 Redis 实例启动是生成的一个随机 ID，唯一标识。第一次复制时，从库不知道主库的 runID。所以设为一个 &quot;?&quot;</li><li>offset：-1表示第一次复制</li></ul><p>主库收到指令后，会发送给从库 fullresync 指令去响应，带着主库的 runID 和目前复制进度 offset；</p><p>从库会记录下这两个参数。fullresync 表示全量复制。主库把所有内容复制给从库。</p></li><li><p>第二阶段：</p><p>主库将所有数据发送给从库进行同步；</p><p>从库收到 rdb 文件后，在本地把原有的数据清除，同步从主库接收到的 rdb 文件；</p><p>如果在主库把数据跟从库同步过程中，主库还有数据写入，为了保证从数据的一致性，主库会在内存空间 replcation buffer ，专门记录 rdb 文件生成后收到的写操作。</p></li><li><p>第三阶段：</p><p>主库把第二阶段执行过程中新收到的操作，再发送给从库，从库再加载执行，就实现同步处理了。</p></li></ol><h3 id="_5、主-从-从模式" tabindex="-1"><a class="header-anchor" href="#_5、主-从-从模式" aria-hidden="true">#</a> 5、主-从-从模式</h3><p>为什么？主从同步中，生成 rdb 与传输 rdb 占用资源和带宽。</p><p>采用主-从-从模式，可以将主库生成和传输 rdb 文件的压力，以级联的方式分散到从库上。</p><figure><img src="'+d+'" alt="主-从-从模式" tabindex="0" loading="lazy"><figcaption>主-从-从模式</figcaption></figure><h3 id="_6、网络连接异常情况" tabindex="-1"><a class="header-anchor" href="#_6、网络连接异常情况" aria-hidden="true">#</a> 6、网络连接异常情况</h3><p>在 Redis2.8 之前，如果网络异常，再次连接后，需要做全量复制</p><p>从 Redis2.8 之后，采用增量复制的方式。repl_backlog_buffer 缓冲区，当主从网络断开后，主库把收到的写操作，写入 replication_buffer 的同时，也写入到repl_backlog_buffer 缓冲区（环形）。</p><p>repl_backlog_size 参数：</p><ul><li>缓冲区大小 = 主库写入速度 * 操作大小 - 主从库网络传输速度 * 操作大小</li><li>repl_backlog_size = 缓冲区大小 * 2</li></ul><figure><img src="'+r+`" alt="网络连接异常情况" tabindex="0" loading="lazy"><figcaption>网络连接异常情况</figcaption></figure><h2 id="七、哨兵模式" tabindex="-1"><a class="header-anchor" href="#七、哨兵模式" aria-hidden="true">#</a> 七、哨兵模式</h2><p>为什么？主服务器宕机，写操作怎么办，主从同步怎么办？</p><h3 id="_1、概述-2" tabindex="-1"><a class="header-anchor" href="#_1、概述-2" aria-hidden="true">#</a> 1、概述</h3><p>当主库宕机，在从库中选择一个，切换为主库。</p><p>问题：</p><ol><li>主库是否真的宕机？</li><li>哪一个从库可以作为主库使用？</li><li>如何实现将新的主库的信息通知给从库和客户端？</li></ol><h3 id="_2、哨兵机制基本流程" tabindex="-1"><a class="header-anchor" href="#_2、哨兵机制基本流程" aria-hidden="true">#</a> 2、哨兵机制基本流程</h3><p>哨兵主要任务：</p><ul><li>监控</li><li>选择主库</li><li>通知</li></ul><h3 id="_3、哨兵模式配置" tabindex="-1"><a class="header-anchor" href="#_3、哨兵模式配置" aria-hidden="true">#</a> 3、哨兵模式配置</h3><ol><li><p>创建编辑哨兵配置文件 sentinel.conf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 端口号</span>
port <span class="token number">26379</span>
<span class="token comment"># sentinel monitor &lt;自定义 redis 主节点名称&gt; &lt;IP&gt; &lt;port&gt; &lt;数量&gt;</span>
sentinel monitor mymaster <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">1</span>
<span class="token comment"># 指定多少毫秒后，主节点没有应答哨兵，就认为下线了</span>
sentinel down-after-milliseconds mymaster <span class="token number">30000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>启动三个 redis 实例，配置成一主二从模式</p></li><li><p>启动哨兵</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-sentinel sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>主服务器宕机，观察哨兵日志</p><p>将 6380 切换成 主库，从原主库6379， 从库6381 从属于 6380，记录 6379 宕机</p></li><li><p>原主库 6379 重启后从属于现主库 6380</p></li></ol><h3 id="_4、新主库的选定" tabindex="-1"><a class="header-anchor" href="#_4、新主库的选定" aria-hidden="true">#</a> 4、新主库的选定</h3><p>筛选+打分，来实现新主库的选定</p><figure><img src="`+u+`" alt="新主库的选定" tabindex="0" loading="lazy"><figcaption>新主库的选定</figcaption></figure><p>三轮打分：</p><ol><li><p>第一轮，优先级：</p><p>通过 replica-priority 配置项，给不同的从库设置优先级。可以将内存大、网络好，配置高的从库优先级设置更高</p></li><li><p>第二轮，和原主库的同步程度：</p><p>选择和原主库 repl_backlog_buffer 中的位置最接近的，作为分数最高</p></li><li><p>第三轮，ID 号小的从库得分高</p><p>每个 Redis 实例都有一个 id</p></li></ol><h3 id="_5、哨兵集群" tabindex="-1"><a class="header-anchor" href="#_5、哨兵集群" aria-hidden="true">#</a> 5、哨兵集群</h3><h4 id="_5-1-概述" tabindex="-1"><a class="header-anchor" href="#_5-1-概述" aria-hidden="true">#</a> 5.1 概述</h4><p>采用多个哨兵（奇数），组成一个集群，以少数服从多数的原则，来判断主库是否已客观下线。</p><p>如果集群中有哨兵实例掉线，其它哨兵还可以继续协作，来完成主库监控和切换工作。</p><h4 id="_5-2-部署" tabindex="-1"><a class="header-anchor" href="#_5-2-部署" aria-hidden="true">#</a> 5.2 部署</h4><ol><li><p>编辑配置三个哨兵配置文件 sentinel_26379.conf sentinel_26380.conf sentinel_26381.conf</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">port</span> <span class="token value attr-value">26379</span>
<span class="token key attr-name">sentinel</span> <span class="token value attr-value">monitor mymaster 127.0.0.1 6379 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">port</span> <span class="token value attr-value">26380</span>
<span class="token key attr-name">sentinel</span> <span class="token value attr-value">monitor mymaster 127.0.0.1 6379 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">port</span> <span class="token value attr-value">26381</span>
<span class="token key attr-name">sentinel</span> <span class="token value attr-value">monitor mymaster 127.0.0.1 6379 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置一主二从的 Redis 实例（同上）：6379 为主库</p></li><li><p>启动三个哨兵实例，主库宕机，发现主库下线后，选举出从库作为新的主库</p></li></ol><table><thead><tr><th>哨兵集群命令</th><th>说明</th></tr></thead><tbody><tr><td>+sdown</td><td>进入主观下线状态</td></tr><tr><td>-sdown</td><td>退出主观下线状态</td></tr><tr><td>+odown</td><td>进入客观下线状态</td></tr><tr><td>-odown</td><td>退出客观下线状态</td></tr><tr><td>+switch-master</td><td>主库地址发生变化切换</td></tr><tr><td>+slave-reconf-inprog</td><td>从库配置了新主库，但尚未进行同步</td></tr><tr><td>+slave-reconf-done</td><td>从库配置了新主库，病我已经完成了同步</td></tr><tr><td>+slave-reconf-sent</td><td>哨兵发送 replicaof 命令配置了从库</td></tr></tbody></table><h4 id="_5-3-运行机制" tabindex="-1"><a class="header-anchor" href="#_5-3-运行机制" aria-hidden="true">#</a> 5.3 运行机制</h4><p>基于 pub/sub（发布订阅）机制实现哨兵集群组成</p><p>基于 info 命令对哨兵监控从库</p><p>哨兵有自身的 pub/sub 机制，实现客户端和哨兵之间的通信</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>subscribe 频道 <span class="token punctuation">[</span>频道 <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
publish 频道 内容
subscribe +odown
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哨兵集群这里应该配置成一致的，不然各个哨兵对于主库的判断无法达成一致</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sentinel down-after-milliseconds mymaster <span class="token number">30000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="八、分片集群" tabindex="-1"><a class="header-anchor" href="#八、分片集群" aria-hidden="true">#</a> 八、分片集群</h2><p>为什么？单个服务器无法支撑庞大的数据量。纵向扩展：增加内存、硬盘、CPU；横向扩展：增加 Redis 实例个数，将数据保存到多台服务器上。</p><h3 id="_1、概述-3" tabindex="-1"><a class="header-anchor" href="#_1、概述-3" aria-hidden="true">#</a> 1、概述</h3><p>业务场景：需要 50G 的数据，对于内存和硬盘配置不足，选用两种方式：</p><ul><li>纵向扩展：加内存、硬盘，提高 CPU；优：简单、直接；缺：成本高，RDB 存储效率考虑</li><li>横向扩展：加 Redis 实例；</li></ul><h3 id="_2、搭建集群" tabindex="-1"><a class="header-anchor" href="#_2、搭建集群" aria-hidden="true">#</a> 2、搭建集群</h3><ol><li><p>编辑 redis6379.conf 配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">include</span> <span class="token value attr-value">/usr/local/redis/redis.conf</span>
<span class="token key attr-name">pidfile</span> <span class="token value attr-value">/var/run/reids_6379.pid</span>
<span class="token key attr-name">port</span> <span class="token value attr-value">6379</span>
<span class="token key attr-name">dbfilename</span> <span class="token value attr-value">dump6379.rdb</span>

<span class="token comment"># 打开集群模式</span>
<span class="token key attr-name">cluster-enable</span> <span class="token value attr-value">yes</span>
<span class="token comment"># 设定节点集群模式</span>
<span class="token key attr-name">cluster-config-file</span> <span class="token value attr-value">nodes-6379.conf</span>
<span class="token comment"># 设定节点失联时间，超时，会自动进行主从切换</span>
<span class="token key attr-name">cluster-node-timeout</span> <span class="token value attr-value">15000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置6份 redis 配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># :%s/原内容/修改后内容</span>
:%s/6379/6380
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改 redis.conf 内容，bind IP 地址加入：打开 bind 127.0.0.1，添加本机 IP：192.168.44.4</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">bind</span> <span class="token value attr-value">127.0.0.1 ::1 192.168.81.128</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动6个 Redis 实例</p></li><li><p>将6个服务合成一个集群</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> create --cluster-replicas <span class="token number">1</span> <span class="token operator">&lt;</span>IP<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>IP<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>IP<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_3、hash-slot" tabindex="-1"><a class="header-anchor" href="#_3、hash-slot" aria-hidden="true">#</a> 3、Hash Slot</h3><blockquote><p>在使用 redis cluster 方案中，一个分片集群有 16384 个 Hash Slot，搭建集群会均分哈希槽</p><p>存储 key-value：key--&gt; 16bit --&gt; 16bit%16384 --&gt; slot 根据 key ，按照 CRC16 算法计算一个 16bit 的值，再用这个值对16384取模运算，得到的数代表对应编号的 hash slot</p></blockquote><p><code>cluster create</code> 命令创建集群时，Redis 会自动把这些 Hash Slot 平均分布在集群实例上。如果集群中有 N 个 实例（主库），每个实例上分配到的 Hash Slot就是：16384/N</p><p>使用 <code>cluster addslots</code> 手工分配 Hash Slot</p><h3 id="_4、集群中的数据操作" tabindex="-1"><a class="header-anchor" href="#_4、集群中的数据操作" aria-hidden="true">#</a> 4、集群中的数据操作</h3><ol><li><p>使用集群方式启动 Redis 命令行，添加 -c 参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-p</span> <span class="token number">7379</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>向 Redis 中设置一个键值对，key 经过运算后，得到相应的 hash slot 进行存储</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> k1 v1
<span class="token builtin class-name">set</span> k2 v2
get k1
get k2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>向集群中插入多个 key-value，由于 key 在多个 hash slot 下，会报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mset k1 v1 k2 v2 k3 v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过 {} 的方式来定义组的概念，{} 内容相同的 key-value 存储在一个 hash slot 中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mset name<span class="token punctuation">{</span>user:001<span class="token punctuation">}</span> zhangsan age<span class="token punctuation">{</span>user:001<span class="token punctuation">}</span> <span class="token number">18</span> gender<span class="token punctuation">{</span>user:001<span class="token punctuation">}</span> male
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取 key 值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>get k1
get name<span class="token punctuation">{</span>user:001<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_5、常用命令" tabindex="-1"><a class="header-anchor" href="#_5、常用命令" aria-hidden="true">#</a> 5、常用命令</h3><ul><li><p>显示集群节点的配置信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取 key 的 hash slot</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster keyslot <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回当前 hash slot 中 key 的数量（仅能查询当前 redis 实例中 slot 的数量）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster countkeysinslot <span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>返回当前 slot 中指定 count 数量的 key</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster getkeysinslot <span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>count<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_6、故障演示" tabindex="-1"><a class="header-anchor" href="#_6、故障演示" aria-hidden="true">#</a> 6、故障演示</h3><p>挂掉一个主机</p><ol><li>将主库（6379）宕机</li><li>宕机主库（6379）的从库（6581）升级为主库</li><li>将宕机的 Redis 实例（6379）重启启动，发现变成新主库（6581）的从库了</li></ol><p>挂掉一个主从</p><p>如果一段 hash slot 的主从同时挂掉，Redis 如何工作？</p><p>通过下面的配置，默认是 yes：如果主从都宕机，则集群宕机</p><p>如果为 no：该段 hash slot 将无法使用，也无法存储</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">cluster-require-full-coverage</span> <span class="token value attr-value">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="九、亿级访问量数据处理" tabindex="-1"><a class="header-anchor" href="#九、亿级访问量数据处理" aria-hidden="true">#</a> 九、亿级访问量数据处理</h2><h3 id="_1、场景描述" tabindex="-1"><a class="header-anchor" href="#_1、场景描述" aria-hidden="true">#</a> 1、场景描述</h3><ul><li>手机 APP 用户登录信息，一天用户登录 ID 或者设备号</li><li>电商或者美团平台，一个商品对应的评论</li><li>文章对应的评论</li><li>APP 上的打卡信息</li><li>网站上的访问量统计</li><li>统计新增用户第二天还留存</li><li>月活统计</li><li>统计独立访客量（Unique Visitor UV）</li></ul><h3 id="_2、集合统计模式" tabindex="-1"><a class="header-anchor" href="#_2、集合统计模式" aria-hidden="true">#</a> 2、集合统计模式</h3><p>四种统计模式：聚合统计、排序统计、二值统计、基数统计</p><h4 id="_2-1-聚合统计" tabindex="-1"><a class="header-anchor" href="#_2-1-聚合统计" aria-hidden="true">#</a> 2.1 聚合统计</h4><p>多个集合的交集、差集、并集</p><p>统计 2021年12月22日登录的用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd user:id:20211222 <span class="token number">1001</span> <span class="token number">1002</span> <span class="token number">1003</span> <span class="token number">1004</span> <span class="token number">1005</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计总用户量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sunionstore user:id user:id user:id:20211222
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计2021年12月23日登录的用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd user:id:20211223 <span class="token number">1001</span> <span class="token number">1003</span> <span class="token number">1006</span> <span class="token number">1007</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计当日新增用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sdiffstore user:new user:id:20211223 user:id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计22日登录，23日还留存的用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sinterstore user:save user:id:20211222 user:id:20211223
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计第一天登录，第二天流失的用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sdiffstore user:rem user:id:20211222 user:id:20211223
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-排序统计" tabindex="-1"><a class="header-anchor" href="#_2-2-排序统计" aria-hidden="true">#</a> 2.2 排序统计</h4><p>List、Set、HashSet、Zset 四种集合中，List 和 Zset 是有序集合</p><p>一种使用 List，lpush 加入数据（分页存在问题）</p><p>一种使用 Zset，按分数权重处理</p><h4 id="_2-3-二值状态统计" tabindex="-1"><a class="header-anchor" href="#_2-3-二值状态统计" aria-hidden="true">#</a> 2.3 二值状态统计</h4><p>统计疫苗接种人数（接种1 没有接种0）、打卡签到（签到1 没有签到0）</p><p>bit 位</p><p>Redis 提供一种扩展数据类型：bitmap，可以看成 bit 数组形式</p><p>常用命令：</p><ul><li><p>setbit、getbit、bitcount</p></li><li><p>统计 2022年1月份的上班打卡情况：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setbit user:sign:202201 <span class="token number">0</span> <span class="token number">1</span>
setbit user:sign:202201 <span class="token number">2</span> <span class="token number">1</span>
setbit user:sign:202201 <span class="token number">3</span> <span class="token number">1</span>

getbit user:sign:202201 <span class="token number">0</span> <span class="token comment"># 1</span>
getbit user:sign:202201 <span class="token number">1</span> <span class="token comment"># 0</span>
getbit user:sign:202201 <span class="token number">2</span> <span class="token comment"># 1</span>

bitcount user:sign:202201 <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>统计1亿用户10天的签到情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>setbit user:sign:1222 <span class="token number">0</span> <span class="token number">1</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
bitop and signmap user:sign:1222 user:sign:1223 user:sign:1224
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-4-基数统计" tabindex="-1"><a class="header-anchor" href="#_2-4-基数统计" aria-hidden="true">#</a> 2.4 基数统计</h4><p>统计一个集合中不重复的元素个数，例如统计网页的UV</p><ul><li><p>第一种，使用 set 或者 hash 来完成统计</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sadd page1:uv u1001 u1002 u1003

scard page1:uv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存在的问题：如果数据量非常大，且页面多，访问人数非常多，造成内存紧张</p></li><li><p>第二种，Redis 提供了 HyperLogLog（hll）：用于统计基数的一种数据集合类型。</p><p>优点：在于当集合元素非常多，使用 hll 所需要的空间是固定且很小，使用12kb内存，可以存储2^64个元素的基数。</p><p>缺点在于统计规则是基于概率完成的。会有 0.81% 左右的误差。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pfadd page1:uv u1001 u1002 u1003
pfcount page1:uv
pfadd page2:uv u1001 u1004
pfmerge page:uv page1:uv page2:uv
pfcount page:uv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3、总结" tabindex="-1"><a class="header-anchor" href="#_3、总结" aria-hidden="true">#</a> 3、总结</h3><table><thead><tr><th>数据类型</th><th>聚合统计</th><th>排序统计</th><th>二值统计</th><th>基数统计</th></tr></thead><tbody><tr><td>set</td><td>支持差集、交集、并集</td><td>×</td><td>×</td><td>支持精确统计（大数据量时占用内存较大）</td></tr><tr><td>zset</td><td>支持差集、交集、并集</td><td>支持</td><td>×</td><td>支持精确统计（大数据量时占用内存较大）</td></tr><tr><td>hash</td><td>×</td><td>×</td><td>×</td><td>支持精确统计（大数据量时占用内存较大）</td></tr><tr><td>list</td><td>×</td><td>支持</td><td>×</td><td>不支持</td></tr><tr><td>bitmap</td><td>与、或、异或运算</td><td>×</td><td>支持</td><td>支持精确统计（大数据量时占用内存较大）</td></tr><tr><td>hyperloglog</td><td>×</td><td>×</td><td>×</td><td>支持（采用概率算法，大数据量时，节省内存，但存在误差）</td></tr></tbody></table><h2 id="十、geospatial" tabindex="-1"><a class="header-anchor" href="#十、geospatial" aria-hidden="true">#</a> 十、Geospatial</h2><h3 id="_1、概述-4" tabindex="-1"><a class="header-anchor" href="#_1、概述-4" aria-hidden="true">#</a> 1、概述</h3><p>基于位置信息服务（Location-Based Service，LBS）的应用。Redis3.2 版本后增加了对 GEO 类型的支持。主要来维护元素的经纬度。</p><p>Redis 基于这种类型，提供了经纬度设置、查询、范围查询、距离查询、经纬度 hash 等一些相关操作</p><h3 id="_2、geo-底层结构" tabindex="-1"><a class="header-anchor" href="#_2、geo-底层结构" aria-hidden="true">#</a> 2、Geo 底层结构</h3><p>场景描述：</p><ol><li>约车系统，针对每一辆车，有一个唯一编号,车辆有行驶的经纬度</li><li>呼叫车辆，会暴露用户的经纬度，根据经纬度进行范围查找，进行匹配</li><li>把附近车辆找到后，车辆信息获取，将信息反馈给用户</li></ol><p>解决方式：</p><ul><li>第一种：可以使用 hash 来存储，但 hash 没有排序功能</li><li>第二种：geo 底层基于 zset 来实现。需要将经纬度放在一起，生成一个权重的分数，按这个分数进行排序</li></ul><p>GEOHash 编码：</p><p>经度-180,180之间，按给定位数做N次二分区操作；维度-90,90之间，按给定位数做N次二分区操作。</p><p>举例：经纬度坐标（116.4，39.96）</p><p>经度进行编码：</p><table><thead><tr><th>次数</th><th>最小</th><th>中间</th><th>最大</th><th>区间</th><th>编码</th></tr></thead><tbody><tr><td>1</td><td>-180</td><td>0</td><td>180</td><td>[0，180]</td><td>1</td></tr><tr><td>2</td><td>0</td><td>90</td><td>180</td><td>[90，180]</td><td>1</td></tr><tr><td>3</td><td>90</td><td>135</td><td>180</td><td>[90，135]</td><td>0</td></tr><tr><td>4</td><td>90</td><td>112.5</td><td>135</td><td>[112.5，135]</td><td>1</td></tr><tr><td>5</td><td>112.5</td><td>123.75</td><td>135</td><td>[112.5，123.75]</td><td>0</td></tr></tbody></table><p>纬度进行编码：</p><table><thead><tr><th>次数</th><th>最小</th><th>中间</th><th>最大</th><th>区间</th><th>编码</th></tr></thead><tbody><tr><td>1</td><td>-90</td><td>0</td><td>90</td><td>[0，90</td><td>1</td></tr><tr><td>2</td><td>0</td><td>45</td><td>90</td><td>[0，45]</td><td>0</td></tr><tr><td>3</td><td>0</td><td>22.5</td><td>45</td><td>[22.5，45]</td><td>1</td></tr><tr><td>4</td><td>22.5</td><td>33.75</td><td>45</td><td>[33.75，45]</td><td>1</td></tr><tr><td>5</td><td>33.75</td><td>39.375</td><td>45</td><td>[39.375，45]</td><td>1</td></tr></tbody></table><p>经度：11010</p><p>维度：10111</p><p>合成编码：1110011101</p><h3 id="_3、geo-操作指令" tabindex="-1"><a class="header-anchor" href="#_3、geo-操作指令" aria-hidden="true">#</a> 3、Geo 操作指令</h3><ul><li><p>添加地理位置（经纬度）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>geoadd <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>longitude<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>latitude<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>longitude<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>latitude<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取指定位置坐标</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>geopos <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>member<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>获取两个位置之间的直线距离</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>geodist <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>member<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>以给定的经纬度作为中心，找出给定半径内的位置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>georadius <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>longitude<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>latitude<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>radius<span class="token operator">&gt;</span> <span class="token punctuation">[</span>m<span class="token operator">|</span>km<span class="token operator">|</span>fm<span class="token operator">|</span>mi<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="_4、案例-查找附近的人" tabindex="-1"><a class="header-anchor" href="#_4、案例-查找附近的人" aria-hidden="true">#</a> 4、案例：查找附近的人</h3><ol><li><p>添加用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>geoadd nearby <span class="token number">116.511023</span> <span class="token number">39.945711</span> person1 <span class="token number">116.508257</span> <span class="token number">39.946735</span> person2
geoadd nearby <span class="token number">116.513395</span> <span class="token number">39.948035</span> person3 <span class="token number">116.51415</span> <span class="token number">39.945131</span> person4 <span class="token number">116.508724</span> <span class="token number">39.943194</span> person5 <span class="token number">116.511526</span> <span class="token number">39.943775</span> person6 <span class="token number">116.509802</span> <span class="token number">39.94419</span> person7 <span class="token number">116.512317</span> <span class="token number">39.946928</span> person8 <span class="token number">116.505166</span> <span class="token number">39.946265</span> person9 <span class="token number">116.506316</span> <span class="token number">39.946375</span> person10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看最有一个用户周围附近的人</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>georadius nearby <span class="token number">116.506316</span> <span class="token number">39.946375</span> <span class="token number">100</span> m
georadius nearby <span class="token number">116.506316</span> <span class="token number">39.946375</span> <span class="token number">500</span> m asc count <span class="token number">5</span>
georadius nearby <span class="token number">116.506316</span> <span class="token number">39.946375</span> <span class="token number">500</span> m desc count <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="十一、redis-事务处理" tabindex="-1"><a class="header-anchor" href="#十一、redis-事务处理" aria-hidden="true">#</a> 十一、Redis 事务处理</h2><h3 id="_1、事务概述" tabindex="-1"><a class="header-anchor" href="#_1、事务概述" aria-hidden="true">#</a> 1、事务概述</h3><p>ACID：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）</p><h3 id="_2、redis-事务" tabindex="-1"><a class="header-anchor" href="#_2、redis-事务" aria-hidden="true">#</a> 2、Redis 事务</h3><p>Redis 提供了 multi、exec 命令来完成</p><ol><li>客户端使用 multi 命令显示地开启事务；</li><li>客户端把事务中要执行的指令发送给服务器端，例如 set、get、lpush，这些指令不会自己执行，而是进入一个队列中；</li><li>客户端向服务器发送一个命令 exec 来完成事务提交，当服务器收到指令后，实际去执行上一步中的命令队列；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>multi
<span class="token builtin class-name">set</span> k1 v1
<span class="token builtin class-name">set</span> k1 v2 
<span class="token builtin class-name">set</span> k3 v3 
<span class="token builtin class-name">exec</span>

multi
<span class="token builtin class-name">set</span> k4 v4
<span class="token builtin class-name">set</span> k5 v5
diacard <span class="token comment"># 取消</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、redis-处理事务的机制" tabindex="-1"><a class="header-anchor" href="#_3、redis-处理事务的机制" aria-hidden="true">#</a> 3、Redis 处理事务的机制</h3><h4 id="_3-1-原子性" tabindex="-1"><a class="header-anchor" href="#_3-1-原子性" aria-hidden="true">#</a> 3.1 原子性</h4><ul><li><p>第一种情况：在执行exec 前，客户端发送错误的指令</p><p>Redis 会报错并记录这个错误。此时还可以发送命令操作，在执行 exec 命令后，Redis 会拒绝执行所有提交的指令，返回事务失败的结果。（保证原子性）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nulti
<span class="token builtin class-name">set</span> k1 v1
<span class="token comment"># 错误的指令</span>
get k1 v2
<span class="token builtin class-name">set</span> k1 v2
<span class="token builtin class-name">exec</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二种情况：向服务器发送指令，其中有指令和操作的数据类型不匹配，放入队列时没有报错</p><p>使用 lpop 操作失败，但之后的 set（get）成功了（不保证原子性）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>multi
<span class="token comment"># 错误指令</span>
lpop k1			<span class="token comment"># 失败</span>
<span class="token builtin class-name">set</span> k2 v2		<span class="token comment"># 成功</span>
<span class="token builtin class-name">exec</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第三种情况：在执行事务的 exec 时，Redis 实例发生故障，导致事务执行失败</p><p>如果 Redis 开启了 AOF 日志，可能会有一部分指令被记录到 AOF 日志中，需要使用 redis-check-aof 去检查 aof 文件，将未完成的事务操作从 aof 清除（从而保证原子性）</p></li></ul><h4 id="_3-2-一致性" tabindex="-1"><a class="header-anchor" href="#_3-2-一致性" aria-hidden="true">#</a> 3.2 一致性</h4><ul><li><p>第一种情况：指令进入队列时就报错，整个事务被放弃执行，可以保证数据的一致性</p></li><li><p>第二种情况：进入队列时没报错，实际执行时报错，有错误的指令不会执行，正确执行可以正常执行，可以保证数据的一致性</p></li><li><p>第三种情况：exec 执行时 Redis 实例发生故障，根据 RDB 和 AOF 情况来做判断：</p><p>没有开启 RDB 和 AOF，数据在重启后都没有，一致的</p><p>使用了 RDB 的方式，RDB 不会在事务执行的时候去保存数据，可以保证一致性</p><p>使用了 AOF 日志，如果事务队列操作记录没有进入 AOF，可以保证一致性；如果已加入一部分，使用 redis-check-aof 清楚事务中已完成的操作，保证事务一致性</p></li></ul><h4 id="_3-3-隔离性" tabindex="-1"><a class="header-anchor" href="#_3-3-隔离性" aria-hidden="true">#</a> 3.3 隔离性</h4><p>提交 exec 指令去执行事务，分成 exec 之前和之后两种情况</p><p>并发操作在执行指令前，要实现隔离性的保证，需要使用 watch 机制，否则不能保证隔离性</p><p>在事务执行前，相当于有一个监控器，在监控 key 是否已经被修改过；如果已修改，则挂起事务执行，避免了事务的隔离性被破坏；如果客户端再次执行，此时没有其他客户端去修改数据，则执行成功</p><p>类似于 Java 中的乐观锁机制</p><blockquote><p>Java 中的乐观锁和悲观锁机制：</p><ul><li>悲观锁：synchronized</li><li>乐观锁：Atomic 原子操作</li></ul></blockquote><p>使用 <code>unwatch</code> 取消所有 <code>watch</code> 命令对所有 key 的监控。</p><h4 id="_3-4-持久性" tabindex="-1"><a class="header-anchor" href="#_3-4-持久性" aria-hidden="true">#</a> 3.4 持久性</h4><p>Redis 是一个 内存数据库，取决于持久化的配置模式</p><ul><li>第一种情况：不开启 RDB 和 AOF ，只当缓存使用，不能保证持久性</li><li>第二种情况：使用 rdb，如果在一个事务执行后，下一次 rdb 快照还未执行前， Redis 实例发生故障，不保证持久性</li><li>第三种情况：使用 aof，配置选项 everysec、always、no，也不能保证持久性</li></ul><p>总结：不管 Redis 采用什么配置模式，都不能保证事务的持久性。</p><h2 id="十二、redis-缓存" tabindex="-1"><a class="header-anchor" href="#十二、redis-缓存" aria-hidden="true">#</a> 十二、Redis 缓存</h2><h3 id="_1、概述-5" tabindex="-1"><a class="header-anchor" href="#_1、概述-5" aria-hidden="true">#</a> 1、概述</h3><ul><li><p>穿透型缓存：</p><figure><img src="`+k+'" alt="穿透型缓存" tabindex="0" loading="lazy"><figcaption>穿透型缓存</figcaption></figure><p>缓存与后端数据库交互在一起，对服务端的调用隐藏细节。</p><p>如果从缓存中读取到数据，就直接返回，读不到，就到数据库中去读取，先更新缓存，再返回给服务端；</p><p>向数据库中写入数据，先写入缓存中，再同步给数据库；</p></li><li><p>旁路型缓存：</p><figure><img src="'+v+`" alt="旁路型缓存" tabindex="0" loading="lazy"><figcaption>旁路型缓存</figcaption></figure><ol><li>服务先到缓存中读取数据，如果数据存在，直接返回</li><li>如果缓存中没有数据，就到数据库中读取</li><li>服务再将从数据库中读到的数据同步给缓存</li></ol></li></ul><p>Redis 是旁路型缓存。</p><h3 id="_2、缓存的特征" tabindex="-1"><a class="header-anchor" href="#_2、缓存的特征" aria-hidden="true">#</a> 2、缓存的特征</h3><ul><li>效率高</li><li>容量小</li></ul><h3 id="_3、redis-缓存处理的两种情况" tabindex="-1"><a class="header-anchor" href="#_3、redis-缓存处理的两种情况" aria-hidden="true">#</a> 3、Redis 缓存处理的两种情况</h3><ul><li>缓存命中：Redis 中有相应的数据，直接从 Redis 中读取，性能很高</li><li>缓存缺失：Redis 中没有响应的数据，从后端关系型数据库中读取数据，性能低。如果发生缓存缺失，为了后续程序请求中可以从缓存中读取数据，要将缺失的数据写入 Redis，也称作缓存更新</li></ul><p>Java 代码模拟</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> cache_key <span class="token operator">=</span> <span class="token string">&quot;user1001&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> cache_value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cache_key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cache_value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 相关业务逻辑处理</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    cache_value <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>cache_key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cache_key<span class="token punctuation">,</span> cache_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 相关业务逻辑处理</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis 不适用于无法获取源码的应用。</p><h3 id="_4、缓存的类型" tabindex="-1"><a class="header-anchor" href="#_4、缓存的类型" aria-hidden="true">#</a> 4、缓存的类型</h3><ul><li><p>只读缓存</p><p>只用读取数据的缓存；</p><p>如果有写的请求，直接发送到后端的 MySQL 或者 Oracle 数据库，在数据库中完成增删改；</p><p>对于删除和修改数据，会导致 Redis 中缓存的数据过时，需要将旧的数据删除，下一次读取时，Redis 缓存缺失，就从数据库中读数据，并更新到 Redis 缓存中。</p><figure><img src="`+m+'" alt="只读缓存" tabindex="0" loading="lazy"><figcaption>只读缓存</figcaption></figure><p>缓存图片、视频、手机的通讯记录、银行的以往账单（不变的数据）</p></li><li><p>读写缓存</p><p>读写缓存，不止完成对数据读取任务，数据的增加、删除、修改操作，也是在 Redis 缓存中完成，由于 Redis 内存数据库效率很高，所以可以快速响应给服务端调用；</p><p>Redis 内存数据，在 Redis 实例出现问题时，导致数据丢失：</p><ul><li>同步直写：有限保证数据的可靠性</li><li>异步写回：执行效率高</li></ul></li></ul><p>场景选择：</p><ul><li>对写的请求操作进行高效处理，选择读写缓存</li><li>如果写的操作很少，需要提升读取效率，选择只读缓存</li></ul><h3 id="_5、缓存数据的删除和替换" tabindex="-1"><a class="header-anchor" href="#_5、缓存数据的删除和替换" aria-hidden="true">#</a> 5、缓存数据的删除和替换</h3><h4 id="_5-1-过期数据" tabindex="-1"><a class="header-anchor" href="#_5-1-过期数据" aria-hidden="true">#</a> 5.1 过期数据</h4><p>可以使用 ttl 来查看 key 的状态。已过期的数据，Redis 并未马上删除。优先执行读写数据操作，删除操作延后执行。</p><h4 id="_5-2-删除策略" tabindex="-1"><a class="header-anchor" href="#_5-2-删除策略" aria-hidden="true">#</a> 5.2 删除策略</h4><p>Redis 中每个 value 对应一个内存地址；在 expires，一个内存地址，对应一个时间戳；如果达到指定时间，就完成删除处理。</p><figure><img src="'+b+'" alt="expires存储形式" tabindex="0" loading="lazy"><figcaption>expires存储形式</figcaption></figure><p>三种删除策略：</p><ul><li><p>定时删除：创建一个定时器，当 key 设置过期时间已达到，删除 key，同时 expires 中也删除</p><p>优点：节约内存</p><p>缺点：CPU 实时处理压力影响，对 Redis 执行的效率有影响</p></li><li><p>惰性删除：数据达到过期时间，不做删除，直到下次访问该数据时，再做删除</p><p>执行流程：在 get 数据时，限制性 Redis 中一个内部函数 expireIfNeeded() ，如果没过期，就返回，如果已过期，就删除，返回 -1</p><p>优点：节约 CPU 资源</p><p>缺点：内存占用过大</p></li><li><p>定期删除：Redis 启动服务时，读取 server.hz 的值，默认为 10，可以通过 info server 指令查看；</p><p>每秒钟执行 server.hz 次定时轮训，调用 serverCron() 函数，函数中油脂性 databaseCron() ，对 16 个数据库进行轮训，执行 activeExpireCycle()，检测其中元素的过期情况。每轮轮训都执行 250ms/server.hz 时长。随机从对应的库中抽取 20（默认）key 进行检测：</p><p>如果 key 已过期，则删除；</p><p>如果一轮中删除的 key 数量 &gt; w*25%，则再次循环刚才的过程；</p><p>如果一轮中删除的 key 数量 &lt;= w*25%，则开始 检查下一个库；</p><p>Redis 使用惰性删除 + 定期删除的策略。</p></li></ul><h4 id="_5-3-逐出算法" tabindex="-1"><a class="header-anchor" href="#_5-3-逐出算法" aria-hidden="true">#</a> 5.3 逐出算法</h4><p>通过配置文件 <code>maxmemory &lt;bytes&gt;</code> 来设置最大缓存容量。一般情况，建议设置为总数据的 15%~30%，在实际上产环境下，可以设置 50%（Redis 专用服务器）。如果不设置，默认全部使用。</p><p>Redis 缓存淘汰策略：</p>',297),y=s(`<ol><li>Redis 默认情况下，不进行数据淘汰 noevction，一旦缓存被写满了，再有写请求，Redis 直接返回错误。</li><li>过期数据淘汰，先限定数据都是在过期范围： <ul><li>valotile-ttl：在进行筛选时，根据过期时间先后顺序进行一个删除，越早过期的越先被发现；</li><li>valotile-random：在设置了过期时间的键值对中，进行随机删除</li><li>valotile-lru：会使用 LRU 算法删选设置了过期的键值对</li><li>valotile-lfu：会使用 LFU 算法删选设置了过期的键值对</li></ul></li><li>所有数据淘汰策略： <ul><li>allkeys-random：从所有键值对中随机筛选并删除</li><li>allkeys-lru：从所有键值对采用 LRU 算法进行筛选并删除</li><li>allkeys-lfu：从所有键值对采用 LFU 算法进行筛选并删除</li></ul></li></ol><p><strong>LRU 算法</strong></p><p>Least Recently Used，最近最少使用原则，最近不用的数据会被筛选出来，最近频繁使用的数据会被保留；</p><p>使用链表管理所有的缓存数据，带来内开销，有数据被访问时，需要执行链表数据的移动，会降低 Redis 的性能；</p><p>改进（简化）：记录数据最有一次访问的时间戳，第一次会随机放选出 N 个数据作为一个候选集合，排序，再使用 LRU 删除；N 的配置 <code>maxmemory-sample 5</code>；</p><p><strong>LFU 算法</strong></p><p>Least Frequently Used，最不常用原则。根据数据使用的历史访问频率来淘汰数据。</p><p>每个数据块都有一个引用计数，按引用计数来排序；如果引用计数相同，按照时间排序。</p><ul><li>新加入的数据排在队尾，引用计数为1；</li><li>当数据被访问，引用计数+1，队列重排；</li><li>当需要淘汰数据时，将队列尾部数据淘汰；</li></ul><p><strong>逐出算法选择</strong></p><p>配置：<code>maxmemory-policy noeviction</code></p><p>优先使用 allkeys-lru 策略；</p><p>如果业务中数据访问频率差别不大，使用 allkeys-random 策略；</p><p>首推的新闻，置顶视频，不设置过期时间，使用 volatile-lru 策略；</p><h3 id="_6、缓存异常" tabindex="-1"><a class="header-anchor" href="#_6、缓存异常" aria-hidden="true">#</a> 6、缓存异常</h3><p>四个方面：缓存中数据和数据库不一致、缓存雪崩、缓存击穿、缓存穿透</p><h4 id="_6-1-数据不一致" tabindex="-1"><a class="header-anchor" href="#_6-1-数据不一致" aria-hidden="true">#</a> 6.1 数据不一致</h4><blockquote><p>数据一致性的两种情况：</p><ul><li>缓存中有数据，需要和数据库一致</li><li>缓存中没有数据，数据库中的数据是最新的</li></ul></blockquote><p>如果不符合以上两种情况，则出现数据不一致的问题。</p><p><strong>读写缓存</strong>：同步直写和异步写回</p><p><strong>只读缓存</strong></p><ul><li><p>新增数据：数据直接写到数据库中，缓存不做操作。满足一致性两种情况的第二种</p></li><li><p>删改数据：</p><p>先删除缓存，后更新数据库：可能会导致，缓存删除成功，数据库更新失败；业务逻辑访问数据时，缓存中查不到数据，缓存缺失，到数据库查询，只能拿到旧值。</p><p>先更新数据库，后删除缓存：可能会导致，数据库更新成功，缓存删除失败；业务逻辑访问数据时，从缓存中读取，但是是旧值；</p></li><li><p>重试机制：把删除的缓存值或者要更新的数据库值先存储到消息队列中（kafka消息队列）。</p></li></ul><p><strong>多线程访问</strong></p><p>先删除缓存，再更新数据库。T1先删除缓存，还没有更新数据库时，T2线程读取缓存，没有，读取数据库（旧值），更新缓存（旧值），此时T1线程更新数据库（新值），读取缓存（旧值），发现缓存中是旧值。</p><p>解决办法：让T1线程先执行休眠（不好控制），T2现成执行结束，T1现成再做一次缓存删除。“延迟双删”。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>redis<span class="token punctuation">.</span><span class="token function">delCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Thraed</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
redis<span class="token punctuation">.</span><span class="token function">delCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先更新数据库，再删除缓存（推荐使用）。</p><p>T1线程先更新数据库值（新值），还没来得及删除缓存（旧值），T2线程读取数据，命中缓存（旧值），T2拿到旧值。直到T1删除缓存，其他线程才会拿到新值。</p><p>可能会出现一小段时间数据不一致，但可以接受。</p><p><strong>总结</strong></p><table><thead><tr><th>并发操作</th><th>顺序</th><th>可能出现的问题</th><th>问题描述</th><th>解决方案</th></tr></thead><tbody><tr><td>没</td><td>先删缓存，后更数据库</td><td>删缓存成功，更数据库失败</td><td>从数据库读到旧值</td><td>重试（消息队列）</td></tr><tr><td>有</td><td>先删缓存，后更数据库</td><td>缓存删除，未更数据库，其他线程访问</td><td>并发线程从数据库读到旧值，并更新缓存，其他线程都命中缓存，读到旧值</td><td>延迟双删</td></tr><tr><td>没</td><td>先更数据库，后删缓存</td><td>更数据库成功，删缓存失败</td><td>缓存中读到旧值</td><td>重试（消息队列）</td></tr><tr><td>有</td><td>先更数据库，后删缓存</td><td>更数据库，未删缓存，其他线程访问</td><td>缓存中读到旧值</td><td>短暂存在数据不一致</td></tr></tbody></table><h4 id="_6-2-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_6-2-缓存雪崩" aria-hidden="true">#</a> 6.2 缓存雪崩</h4><p>大量的应用请求无法在 Redis 中完成处理。缓存中读取不到数据，进入到数据库服务器，数据库压力激增，数据库崩溃，请求堆积在 Redis，导致 Redis 服务器崩溃，导致 Redis 集群崩溃，进而导致应用服务器崩溃。</p><p><strong>原因</strong></p><p>原因1：大量缓存同时过期</p><p>解决方案：</p><ul><li>页面静态化处理：对于不经常更换的数据，生成静态页</li><li>避免大量数据同时过期：为商品过期时间追加一个随机数（1~3min）</li><li>构建多级缓存架构：Redis 缓存 + Nginx 缓存 + ehcache 缓存</li><li>延长或取消热度超高数据过期时间</li><li>服务降级：不同的数据采取不同的处理方式</li></ul><p>原因2：Redis 实例故障</p><p>解决方案：</p><ul><li>服务熔断或请求限流机制</li><li>提前预警（灾难预警）：监控 Redis 服务器性能指标，包括数据库服务器性能指标、CPU、内存、平均响应时间、线程数等</li><li>集群：有节点出故障，主从切换</li></ul><h4 id="_6-3-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_6-3-缓存击穿" aria-hidden="true">#</a> 6.3 缓存击穿</h4><p>对某个访问频繁热点数据的请求。主要发生在热点数据失效。</p><p>解决方案：</p><ul><li>预先设定：双11，设定几款主打商品，延长过期时间</li><li>实时监控：监控访问量，避免访问激增</li><li>定时任务：启动任务调度，后台刷新数据的有效期</li><li>分布式锁（不推荐）：带来性能问题</li></ul><h4 id="_6-4-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_6-4-缓存穿透" aria-hidden="true">#</a> 6.4 缓存穿透</h4><p>要访问的数据在 Redis 中不存在，在数据库中也不存在。</p><p><strong>原因</strong></p><p>原因1：业务层误操作</p><p>原因2（多）：恶意攻击</p><p><strong>解决方案</strong></p><p>方案1：缓存空值或缺省值，避免大量请求访问数据库</p><p>方案2：使用布隆过滤器，快速判断数据是否存在</p><p>方案3：在请求入口前端进行请求检测</p><p>方案4：实时监控，监控 Redis 命中率</p><p>方案5：key 加密</p><h2 id="十三、使用-jedis-操作" tabindex="-1"><a class="header-anchor" href="#十三、使用-jedis-操作" aria-hidden="true">#</a> 十三、使用 Jedis 操作</h2><h3 id="_1、使用-jedis-连接-redis" tabindex="-1"><a class="header-anchor" href="#_1、使用-jedis-连接-redis" aria-hidden="true">#</a> 1、使用 Jedis 连接 Redis</h3><ol><li><p>Redis 服务相关配置文件设置</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 添加虚拟机 IP 地址修改</span>
<span class="token key attr-name">bind</span> <span class="token value attr-value">127.0.0.1 -::1 192.168.81.128</span>
<span class="token comment"># 将文件保护模式修改，原有默认值是yes，改成no</span>
<span class="token key attr-name">bind</span> <span class="token value attr-value">192.168.44.4 127.0.0.1 -::1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>防火墙打开 6379 端口</p></li><li><p>启动 Redis 服务</p></li><li><p>pom.xml 中引入 jedis 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Java 代码测试连接</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;c.TestConnection&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConnection</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> pong <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>pong<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2、操作-string" tabindex="-1"><a class="header-anchor" href="#_2、操作-string" aria-hidden="true">#</a> 2、操作 String</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// set(jedis, &quot;k1&quot;, &quot;v1&quot;);  // 设置</span>
        <span class="token comment">// System.out.println(get(jedis, &quot;k1&quot;));    // 获取</span>
        <span class="token comment">// mset(jedis, &quot;k3&quot;, &quot;v3&quot;, &quot;k4&quot;, &quot;v4&quot;); // mset</span>
        <span class="token comment">// mget(jedis, &quot;k3&quot;, &quot;k4&quot;);    // mget</span>

        <span class="token comment">// set_ex(jedis, &quot;k5&quot;, 30, &quot;v5&quot;);       // set ex</span>
        <span class="token function">ttl</span><span class="token punctuation">(</span>jedis<span class="token punctuation">,</span> <span class="token string">&quot;k5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ttl</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> res <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mset</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> keyValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">mset</span><span class="token punctuation">(</span>keyValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mget</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">mget</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set_ex</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> seconds<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> seconds<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ttl</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、操作-list" tabindex="-1"><a class="header-anchor" href="#_3、操作-list" aria-hidden="true">#</a> 3、操作 List</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestList</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// lpush(jedis, &quot;k1&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;);          // lpush</span>
        <span class="token comment">// lrange(jedis, &quot;k1&quot;, 0, -1);                 // lrange</span>
        <span class="token comment">// lpop(jedis, &quot;k1&quot;, 2);                       // lpop</span>
        <span class="token function">lrem</span><span class="token punctuation">(</span>jedis<span class="token punctuation">,</span> <span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// lrem</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lpush</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lrange</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lpop</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lpop</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lrem</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> lrem <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lrem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、操作-hash" tabindex="-1"><a class="header-anchor" href="#_4、操作-hash" aria-hidden="true">#</a> 4、操作 hash</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHash</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// hset(jedis, &quot;user:1001&quot;, &quot;name&quot;, &quot;张三&quot;);      // hset</span>
        <span class="token comment">// hset(jedis, &quot;user:1001&quot;, &quot;age&quot;, &quot;18&quot;);       // hget</span>
        <span class="token comment">// hget(jedis, &quot;user:1001&quot;, &quot;name&quot;);   // hget</span>
        <span class="token comment">/* Map&lt;String, String&gt; hash = new HashMap&lt;&gt;();
        hash.put(&quot;name&quot;, &quot;lisi&quot;);
        hash.put(&quot;age&quot;, &quot;18&quot;);
        hash.put(&quot;gender&quot;, &quot;male&quot;);
        hset(jedis, &quot;user:1002&quot;, hash); */</span>
        <span class="token comment">// hgetAll(jedis, &quot;user:1002&quot;);        // hgetall</span>
        <span class="token function">hkeys</span><span class="token punctuation">(</span>jedis<span class="token punctuation">,</span> <span class="token string">&quot;user:1002&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// hkeys</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hget</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hash <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        hash<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hkeys</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fields <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hkeys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fields<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、操作-set" tabindex="-1"><a class="header-anchor" href="#_5、操作-set" aria-hidden="true">#</a> 5、操作 set</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSet</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// sadd(jedis, &quot;k2&quot;, &quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;, &quot;ddd&quot;); // sadd</span>
        <span class="token comment">// smembers(jedis, &quot;k1&quot;);          // smembers</span>
        <span class="token comment">// sismember(jedis, &quot;k1&quot;, &quot;aaa&quot;);  // sismember</span>
        <span class="token comment">// scard(jedis, &quot;k1&quot;);     // scard</span>
        <span class="token comment">// srem(jedis, &quot;k1&quot;, &quot;ccc&quot;, &quot;ddd&quot;); // srem</span>
        <span class="token function">sdiff</span><span class="token punctuation">(</span>jedis<span class="token punctuation">,</span> <span class="token string">&quot;k2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// sdiff</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sadd</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> members<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">smembers</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        members<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sismember</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> isMember <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isMember<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">scard</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> scard <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">scard</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scard<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">srem</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> members<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> srem <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">srem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>srem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sdiff</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sdiff <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">sdiff</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sdiff<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、操作-zset" tabindex="-1"><a class="header-anchor" href="#_6、操作-zset" aria-hidden="true">#</a> 6、操作 zset</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>public class TestZset <span class="token punctuation">{</span>
    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Jedis jedis <span class="token operator">=</span> new Jedis<span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span>, <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        // zadd<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k1&quot;</span>, <span class="token number">100</span>, <span class="token string">&quot;元旦假期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      // zadd
        // zadd<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k1&quot;</span>, <span class="token number">110</span>, <span class="token string">&quot;清明假期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        // zadd<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k1&quot;</span>, <span class="token number">120</span>, <span class="token string">&quot;五一假期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        // zrange<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k2&quot;</span>, <span class="token number">0</span>, -1<span class="token punctuation">)</span><span class="token punctuation">;</span>      // zrange
        /* Map<span class="token operator">&lt;</span>String, Double<span class="token operator">&gt;</span> members <span class="token operator">=</span> new HashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        members.put<span class="token punctuation">(</span><span class="token string">&quot;元旦&quot;</span>, <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        members.put<span class="token punctuation">(</span><span class="token string">&quot;清明&quot;</span>, <span class="token number">110.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        members.put<span class="token punctuation">(</span><span class="token string">&quot;劳动节&quot;</span>, <span class="token number">120.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        zadd<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k2&quot;</span>, members<span class="token punctuation">)</span><span class="token punctuation">;</span> */
        // zrevrange<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k2&quot;</span>, <span class="token number">0</span>, -1<span class="token punctuation">)</span><span class="token punctuation">;</span>  // zrevrange
        // zrank<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k2&quot;</span>, <span class="token string">&quot;清明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // zrank
        zcard<span class="token punctuation">(</span>jedis, <span class="token string">&quot;k2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         // zcard
    <span class="token punctuation">}</span>

    public static void zadd<span class="token punctuation">(</span>Jedis jedis, String key, double score, String member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis.zadd<span class="token punctuation">(</span>key, score, member<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public static void zadd<span class="token punctuation">(</span>Jedis jedis, String key, Map<span class="token operator">&lt;</span>String, Double<span class="token operator">&gt;</span> members<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis.zadd<span class="token punctuation">(</span>key, members<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public static void zrange<span class="token punctuation">(</span>Jedis jedis, String key, long start, long stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> members <span class="token operator">=</span> jedis.zrange<span class="token punctuation">(</span>key, start, stop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        members.forEach<span class="token punctuation">(</span>System.out::println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public static void zrevrange<span class="token punctuation">(</span>Jedis jedis, String key, long start, long stop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> members <span class="token operator">=</span> jedis.zrevrange<span class="token punctuation">(</span>key, start, stop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        members.forEach<span class="token punctuation">(</span>System.out::println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public static void zrank<span class="token punctuation">(</span>Jedis jedis, String key, String member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Long rank <span class="token operator">=</span> jedis.zrank<span class="token punctuation">(</span>key, member<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System.out.println<span class="token punctuation">(</span>rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    public static void zcard<span class="token punctuation">(</span>Jedis jedis, String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        long count <span class="token operator">=</span> jedis.zcard<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、操作-geo" tabindex="-1"><a class="header-anchor" href="#_7、操作-geo" aria-hidden="true">#</a> 7、操作 geo</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGeo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// geoadd(jedis, &quot;nearby&quot;, 116.511023, 39.945711, &quot;person1&quot;);   // geoadd</span>
        <span class="token comment">// geoadd(jedis, &quot;nearby&quot;, 116.508257, 39.946735, &quot;person2&quot;);         // geoadd</span>
        <span class="token comment">// geodist(jedis, &quot;nearby&quot;, &quot;person1&quot;, &quot;person2&quot;); // geodist</span>
        <span class="token comment">// georadius(jedis, &quot;nearby&quot;, 116.511023, 39.945711, 500); // georadius</span>
        <span class="token function">geopos</span><span class="token punctuation">(</span>jedis<span class="token punctuation">,</span> <span class="token string">&quot;nearby&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;person1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;person2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">geoadd</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">double</span> longitude<span class="token punctuation">,</span> <span class="token keyword">double</span> latitude<span class="token punctuation">,</span> <span class="token class-name">String</span> member<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">geoadd</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">geodist</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> member1<span class="token punctuation">,</span> <span class="token class-name">String</span> member2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Double</span> dist <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">geodist</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> member1<span class="token punctuation">,</span> member2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">geopos</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> members<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GeoCoordinate</span><span class="token punctuation">&gt;</span></span> geopos <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">geopos</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span>
        geopos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>g <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> g<span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">georadius</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">double</span> longitude<span class="token punctuation">,</span> <span class="token keyword">double</span> latitude<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GeoRadiusResponse</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">georadius</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token class-name">GeoUnit<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>g <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">getMemberByString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8、应用案例" tabindex="-1"><a class="header-anchor" href="#_8、应用案例" aria-hidden="true">#</a> 8、应用案例</h3><p>需求：影虎使用银行 APP 登录转账，要求动态发送手机验证码，验证码设定 5 min 有效，1 天内最多发送 3 次；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApp</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.out.println(getCode());</span>
        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.81.128&quot;</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// send(jedis, &quot;13512345678&quot;);</span>
        <span class="token function">verifyCode</span><span class="token punctuation">(</span>jedis<span class="token punctuation">,</span> <span class="token string">&quot;13512345678&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;457061&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> countKey <span class="token operator">=</span> <span class="token string">&quot;v:&quot;</span> <span class="token operator">+</span> phoneNumber <span class="token operator">+</span> <span class="token string">&quot;:count&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// 当前手机号已发送次数的 key</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">&quot;v:&quot;</span> <span class="token operator">+</span> phoneNumber <span class="token operator">+</span> <span class="token string">&quot;:code&quot;</span><span class="token punctuation">;</span>      <span class="token comment">// 当前手机号已发送的验证码的 key</span>
        <span class="token class-name">String</span> count <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有获取，表明该 key 不存在，第一次设置，有效时间为一天</span>
            jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果不到 3 次，没法一次，计数 + 1</span>
            jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span>countKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;今日尝试三次，24h 之后再试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        jedis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送验证码进行保存</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">verifyCode</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">,</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> codeKey <span class="token operator">=</span> <span class="token string">&quot;v:&quot;</span> <span class="token operator">+</span> phoneNumber <span class="token operator">+</span> <span class="token string">&quot;:code&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>codeKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;验证成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;验证失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73);function f(x,_){const n=i("Mermaid");return e(),t("div",null,[g,p(n,{id:"mermaid-3129",code:"eJxLL0osyFDwCeJy1Hi2fcazjRuer532fOpSTV1dOyeNvPzUsuSSzPy8Jzt6IbKaXI5AGWeNF/tnv1jY82zqhme962AyzkAZF6BM+7M58zFlXDWedTY8m9OJKuMClHHTKMvPSSzJzEnVzSkqhYi5I4mlQcU8EGIlJTkQMU+EWFFiXkp+riaXK1DYSyMxJyc7tbIYYiJIyBshBDIQJOQDF4LpBQBrInDu"}),y])}const w=a(h,[["render",f],["__file","Redis.html.vue"]]);export{w as default};
